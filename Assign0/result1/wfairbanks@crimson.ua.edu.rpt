wfairbanks@crimson.ua.edu

rm -f da.o da-0-0.o integer.o cda.o cda-0-0.o integer.o stack.o da.o stack-0-0.o integer.o queue.o cda.o queue-0-0.o integer.o da-0-0 cda-0-0 stack-0-0 queue-0-0
gcc -Wall -Wextra -std=c99 -c da.c
gcc -Wall -Wextra -std=c99 -c da-0-0.c
gcc -Wall -Wextra -std=c99 -c integer.c
gcc -Wall -Wextra -std=c99 da.o da-0-0.o integer.o -o da-0-0
gcc -Wall -Wextra -std=c99 -c cda.c
gcc -Wall -Wextra -std=c99 -c cda-0-0.c
gcc -Wall -Wextra -std=c99 cda.o cda-0-0.o integer.o -o cda-0-0
gcc -Wall -Wextra -std=c99 -c stack.c
gcc -Wall -Wextra -std=c99 -c stack-0-0.c
gcc -Wall -Wextra -std=c99 stack.o da.o stack-0-0.o integer.o -o stack-0-0
gcc -Wall -Wextra -std=c99 -c queue.c
gcc -Wall -Wextra -std=c99 -c queue-0-0.c
gcc -Wall -Wextra -std=c99 queue.o cda.o queue-0-0.o integer.o -o queue-0-0

testing results...


THESE TESTS ARE SUPPLIED AS A CONVENIENCE TO YOU. THE RESULTS GENERATED
FOR THIS REPORT MAY BE IN CONFLICT WITH THE ASSIGNMENT SPECIFICATION.
ALWAYS CODE TO THE ASSIGNMENT SPECIFICATION, NOT TO THE RESULTS FOUND
HEREIN.

NOTE: your mail client may reformat this report. Do not use the output
in this report for debugging purposes

Test files can be retrieved with:

     wget beastie.cs.ua.edu/cs201/testing/0/preliminary.tgz


!! TRYING YOUR DA MODULE WITH ALTERNATE CODE

!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #0
     test program is da-0-0.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, simple
items: [[1]]
items: [4,3,2,1,[0]]
items: [4,2,1,[1]]
items: [4,2,[2]]
items: [2,[3]]
items: [[1]]
items: [4,3,2,1]
items: [4,2,1]
items: [4,2]
items: [2]
items: []
size: 0
--------------------------------------------------------------

Your output matches exactly!


TEST #1 (valgrind)
     test program is da-0-0.c


==27350== All heap blocks were freed -- no leaks are possible
==27350== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #2
     test program is da-0-1.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
REAL test of DA, simple
items: [[1]]
items: [4.400000,3.300000,2.200000,1.100000,[0]]
items: [4.400000,2.200000,1.100000,[1]]
items: [4.400000,2.200000,[2]]
items: [2.200000,[3]]
items: [[1]]
items: [4.400000,3.300000,2.200000,1.100000]
items: [4.400000,2.200000,1.100000]
items: [4.400000,2.200000]
items: [2.200000]
items: []
size: 0
--------------------------------------------------------------

Your output matches exactly!


TEST #3 (valgrind)
     test program is da-0-1.c


==27398== All heap blocks were freed -- no leaks are possible
==27398== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #4
     test program is da-0-2.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
STRING test of DA, simple
items: [[1]]
items: [a4,a3,a2,a1,[0]]
items: [a4,a2,a1,[1]]
items: [a4,a2,[2]]
items: [a2,[3]]
items: [[1]]
items: [a4,a3,a2,a1]
items: [a4,a2,a1]
items: [a4,a2]
items: [a2]
items: []
size: 0
--------------------------------------------------------------

Your output matches exactly!


TEST #5 (valgrind)
     test program is da-0-2.c


==27446== All heap blocks were freed -- no leaks are possible
==27446== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #6
     test program is da-0-3.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, random insertions
items: [[1]]
items: [4,14,3,8,19,8,14,3,1,13,4,2,3,14,0,17,2,10,5,1,[12]]
size is 20
items: [4,6,13,14,3,7,0,7,8,14,19,8,14,3,13,1,7,13,2,4,16,16,16,2,3,6,11,14,11,0,17,1,12,2,10,4,5,1,1,1,[24]]
size is 40
--------------------------------------------------------------

Your output matches exactly!


TEST #7 (valgrind)
     test program is da-0-3.c


==27494== All heap blocks were freed -- no leaks are possible
==27494== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #8
     test program is da-0-4.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, insertions at the tail
items: [[1]]
items: [15,10,16,0,13,6,0,10,0,8,14,19,11,3,12,6,4,19,0,10,[12]]
size is 20
items: [15,10,16,0,13,6,0,10,0,8,14,19,11,3,12,6,4,19,0,10,13,13,15,17,1,13,2,8,5,7,2,16,13,8,19,10,7,1,18,13,[24]]
size is 40
--------------------------------------------------------------

Your output matches exactly!


TEST #9 (valgrind)
     test program is da-0-4.c


==27542== All heap blocks were freed -- no leaks are possible
==27542== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #10
     test program is da-0-5.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, random insertions and deletions
items: [[1]]
items: [11,0,14,0,8,5,12,[9]]
size is 7
items: [10,6,0,2,3,14,0,6,2,8,5,12,2,[19]]
size is 13
--------------------------------------------------------------

Files yours and expected differ

YOUR RESULTS:
--------------------------------------------------------------
INTEGER test of DA, random insertions and deletions
items: [[1]]
items: [11,0,14,0,8,5,12,[25]]
size is 7
items: [10,6,0,2,3,14,0,6,2,8,5,12,2,[19]]
size is 13
--------------------------------------------------------------
Output does not match exactly; the test FAILED


TEST #11 (valgrind)
     test program is da-0-5.c


==27591== All heap blocks were freed -- no leaks are possible
==27591== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #12
     test program is da-0-6.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, insertions and deletions at tail
items: [[1]]
items: [12,12,17,1,8,[11]]
size is 5
items: [12,12,17,1,8,3,14,7,[24]]
size is 8
--------------------------------------------------------------

Your output matches exactly!


TEST #13 (valgrind)
     test program is da-0-6.c


==27639== All heap blocks were freed -- no leaks are possible
==27639== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #14
     test program is da-0-7.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: [0,1,2,3,13,10,4,5,11,6,7,18,12,20,15,8,23,22,16,19,14,17,21,9,[8]]
size is 24
items: [1,[0]]
size is 1
items: [1,0,1,2,3,4,5,13,9,10,6,11,18,7,17,15,21,23,16,8,14,22,12,19,20,[7]]
size is 25
items: [1,1,[2]]
size is 2
--------------------------------------------------------------

Files yours and expected differ

YOUR RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: [0,1,2,3,13,10,4,5,11,6,7,18,12,20,15,8,23,22,16,19,14,17,21,9,[8]]
size is 24
items: [1,[0]]
size is 1
items: [1,0,1,2,3,4,5,13,9,10,6,11,18,7,17,15,21,23,16,8,14,22,12,19,20,[7]]
size is 25
items: [1,1,[6]]
size is 2
--------------------------------------------------------------
Output does not match exactly; the test FAILED


TEST #15 (valgrind)
     test program is da-0-7.c


==27688== All heap blocks were freed -- no leaks are possible
==27688== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #16
     test program is da-0-8.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, random insertions
items: [[1]]
items: (displaying first and last 100 elements)
747 396 1281 1076 1033 1450 465 1742 1158 1478 385 1387 1195 1764 375 1821 263 908 1201 1055 1734 1856 1505 844 10 1547 73 1769 793 368 136 226 213 374 290 253 1759 487 759 1649 108 897 1078 714 1391 48 475 1815 640 739 242 753 1230 1107 1220 1661 634 1763 1049 515 193 503 1024 867 1681 657 1265 758 91 1853 1185 183 404 897 446 719 1211 434 200 475 1780 1333 1113 1478 1579 1618 1707 317 43 405 1205 652 560 1268 693 710 22 1305 1219 323 ... 943 869 161 1653 986 1517 374 822 1488 1329 1295 356 1083 946 1318 63 1551 489 252 657 1367 1638 1667 1599 1335 1461 1526 203 761 811 507 1622 253 358 483 1840 1679 1493 1449 133 985 311 1754 510 1112 1306 848 556 259 1422 1561 1299 1659 712 1634 484 1623 1549 1236 289 1689 163 1282 153 1036 1470 407 1263 1442 468 184 1332 1809 400 381 750 402 576 1563 488 1015 1162 272 1636 235 1100 1597 1656 1832 268 1717 1827 291 825 320 1822 1585 7 636 441

size is 1859
items: (displaying first and last 100 elements)
747 1035 396 1281 473 716 409 69 1076 1033 1087 639 1450 1298 465 8 952 268 975 1742 86 1496 1158 1287 1478 385 1387 1195 261 1703 1764 453 375 1821 263 245 456 908 1201 495 1055 1606 844 1734 592 1856 1673 734 1505 1552 844 10 638 559 1036 184 1547 73 1769 340 1658 793 368 136 1760 774 226 1779 213 1767 253 1004 1016 374 724 515 1198 290 253 704 579 1759 487 1330 759 1470 1649 567 108 1381 897 1717 1666 1078 668 714 1391 48 944 475 ... 311 1703 1754 510 1112 1246 1306 848 1501 556 259 1422 1711 1660 1561 1299 1659 712 1634 484 1623 325 1549 1121 1236 1619 289 1689 1392 163 1282 153 1374 312 566 1036 1470 407 152 1263 1442 468 184 1332 1626 1809 1153 968 400 345 581 1296 911 381 1527 750 402 1509 576 1482 252 1563 1411 488 1015 1162 272 1636 235 291 217 874 57 367 1089 1008 1100 1853 1597 1656 915 1832 1311 1660 268 1514 1717 1827 291 825 715 320 1822 1565 1585 7 1538 636 1718 441

size is 3718
--------------------------------------------------------------

Your output matches exactly!


TEST #17 (valgrind)
     test program is da-0-8.c


==27736== All heap blocks were freed -- no leaks are possible
==27736== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #18
     test program is da-0-9.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, insertions at the tail
items: [[1]]
items: (displaying first and last 100 elements)
971 1475 348 472 1826 1798 63 1726 1186 814 1876 252 1889 1910 1816 737 1200 284 209 734 482 1416 1563 1978 221 446 1509 1831 946 1603 1191 1325 90 1707 134 102 748 444 436 837 990 522 1503 1434 1870 987 915 1227 1691 826 912 1964 453 1501 606 1068 1150 1865 1473 1117 119 186 1946 1561 1876 999 1083 1978 1146 1948 1354 1118 382 1172 1818 973 1922 501 101 1049 1979 63 786 375 1057 976 1115 929 613 882 1919 144 544 1015 238 153 1881 816 26 1890 ... 266 555 1805 1975 1944 442 1282 457 1529 1577 448 1313 1007 70 1156 638 906 1207 234 698 596 1191 1179 1741 529 1118 804 1746 815 448 1904 923 1802 1297 848 230 665 1330 838 89 1926 113 929 555 1443 1484 1613 1934 1827 1227 1002 1888 647 1279 71 620 106 503 121 787 1585 449 1969 395 1389 254 609 1826 1135 270 250 973 907 1152 303 1877 1502 861 484 1050 409 1794 1454 1558 508 1565 248 636 1782 1468 1258 1742 1446 13 1629 1571 137 585 768 195

size is 1993
items: (displaying first and last 100 elements)
971 1475 348 472 1826 1798 63 1726 1186 814 1876 252 1889 1910 1816 737 1200 284 209 734 482 1416 1563 1978 221 446 1509 1831 946 1603 1191 1325 90 1707 134 102 748 444 436 837 990 522 1503 1434 1870 987 915 1227 1691 826 912 1964 453 1501 606 1068 1150 1865 1473 1117 119 186 1946 1561 1876 999 1083 1978 1146 1948 1354 1118 382 1172 1818 973 1922 501 101 1049 1979 63 786 375 1057 976 1115 929 613 882 1919 144 544 1015 238 153 1881 816 26 1890 ... 1752 325 1678 1231 1961 314 1477 602 299 382 1132 123 777 771 1111 994 1001 522 1901 735 760 37 939 977 324 1087 756 1945 1235 350 1360 745 1946 815 550 1252 1884 1315 1689 1830 941 1477 1896 760 1674 1013 1976 932 316 1312 828 1938 1860 1310 843 1337 1594 1250 1773 164 649 26 225 90 474 1170 1973 1543 1659 925 1530 63 853 396 853 1610 1259 1896 363 1788 1396 1662 1363 507 1595 1062 1463 32 1960 479 511 91 1494 785 1741 462 1067 50 866 989

size is 3986
--------------------------------------------------------------

Your output matches exactly!


TEST #19 (valgrind)
     test program is da-0-9.c


==27784== All heap blocks were freed -- no leaks are possible
==27784== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #20
     test program is da-0-10.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, random insertions and deletions
items: [[1]]
items: (displaying first and last 100 elements)
1072 546 9 292 102 1 1041 135 857 493 1170 166 1051 459 342 806 1206 452 181 926 737 189 438 582 348 785 197 288 140 766 533 1123 1011 1131 579 590 883 1178 558 746 392 115 433 320 1053 491 1125 1173 640 1172 534 226 975 1098 817 863 547 461 949 338 132 231 151 422 876 343 1194 660 788 1138 581 651 242 1198 519 358 1008 132 1230 343 506 701 556 46 936 535 734 863 914 1149 182 211 288 1213 428 137 879 294 296 962 ... 395 223 155 297 809 1097 364 341 1148 637 650 101 423 364 549 707 5 794 511 593 257 540 67 39 1030 922 200 68 1051 11 208 998 1174 219 181 878 195 621 193 1071 1184 1202 1018 905 748 154 952 1197 993 1001 486 1040 1061 676 434 1241 124 692 1074 381 957 1125 1243 1125 769 538 790 1172 840 168 395 1009 1249 709 214 819 208 1055 233 851 1148 43 82 167 437 498 1050 870 802 769 239 162 1144 89 90 32 222 235 742 1126

size is 587
items: (displaying first and last 100 elements)
874 895 1072 478 510 86 9 295 713 292 944 1235 1 741 818 151 460 300 1041 135 1007 524 1170 166 581 1051 1239 39 926 1121 925 1237 1082 195 342 745 50 806 687 280 667 181 753 926 737 146 313 454 189 1 306 817 438 582 402 348 1048 124 577 785 272 512 197 288 101 140 447 263 742 773 180 740 766 414 533 1123 1045 1031 165 1131 590 883 704 1237 23 824 1172 643 144 919 482 650 1219 122 320 134 1056 491 1125 169 ... 909 605 993 552 486 387 1040 736 1236 843 449 434 1241 10 204 170 525 1074 873 245 381 194 47 957 1125 1243 1077 24 81 44 342 794 720 645 769 258 538 651 1172 1076 168 142 395 1009 1249 214 933 819 588 579 208 1055 233 251 404 459 12 851 1148 43 807 563 794 167 437 698 901 498 1050 870 257 802 93 837 921 1064 836 844 242 1077 921 1206 718 628 239 162 1034 89 1061 90 32 893 131 222 742 319 398 280 177 536

size is 1179
--------------------------------------------------------------

Your output matches exactly!


TEST #21 (valgrind)
     test program is da-0-10.c


==27832== All heap blocks were freed -- no leaks are possible
==27832== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #22
     test program is da-0-11.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, insertions and deletions at tail
items: [[1]]
items: (displaying first and last 100 elements)
858 1528 406 2090 1465 793 1227 1187 1633 896 1714 1395 339 368 1202 436 221 835 1227 1528 1552 538 1346 168 360 636 1847 1954 1604 241 1094 348 1767 1501 322 1119 178 1549 190 1811 330 1904 1091 669 158 179 1103 378 1014 217 1904 450 753 1136 617 1113 1772 348 952 1262 589 2044 1609 241 1429 1929 1360 1608 1363 1548 1303 1693 1338 280 246 1494 460 1350 1872 1472 1565 1662 1923 204 684 426 1315 341 772 151 1603 1360 82 1096 1601 1509 912 845 1003 161 ... 1551 1847 1613 1997 473 586 1379 1795 575 195 1677 2043 656 825 80 1770 2073 591 1387 833 862 143 1204 286 1782 957 1226 251 1348 490 255 784 221 1866 667 692 338 2044 373 912 125 2048 841 782 759 919 438 716 1510 1824 1549 256 1965 638 542 1633 1595 1768 1885 828 142 24 1612 361 1889 165 1051 111 96 1422 1023 221 1356 1862 1001 2113 667 1440 716 61 1148 149 317 997 787 860 516 267 512 285 1095 653 308 593 1014 83 756 2066 194 850

size is 404
items: (displaying first and last 100 elements)
858 1528 406 2090 1465 793 1227 1187 1633 896 1714 1395 339 368 1202 436 221 835 1227 1528 1552 538 1346 168 360 636 1847 1954 1604 241 1094 348 1767 1501 322 1119 178 1549 190 1811 330 1904 1091 669 158 179 1103 378 1014 217 1904 450 753 1136 617 1113 1772 348 952 1262 589 2044 1609 241 1429 1929 1360 1608 1363 1548 1303 1693 1338 280 246 1494 460 1350 1872 1472 1565 1662 1923 204 684 426 1315 341 772 151 1603 1360 82 1096 1601 1509 912 845 1003 161 ... 1784 91 664 1458 695 132 1067 808 1206 196 1833 1100 1558 38 422 1389 587 76 2039 1708 1924 247 1026 1431 148 466 71 1616 1280 2092 24 948 69 686 292 764 818 1359 1570 2024 1553 1290 1009 995 1326 1431 269 1913 1506 194 1505 1314 441 415 629 587 879 700 89 45 676 113 992 745 797 1284 1507 1616 528 964 1524 2079 140 417 961 1464 1849 1230 1261 1241 1422 652 439 1862 1065 1068 335 1944 1766 425 1988 328 536 866 1073 1334 34 466 834 562

size is 1116
--------------------------------------------------------------

Your output matches exactly!


TEST #23 (valgrind)
     test program is da-0-11.c


==27880== All heap blocks were freed -- no leaks are possible
==27880== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #24
     test program is da-0-12.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 1 2 12 3 4 5 6 7 18 8 14 21 15 17 20 9 11 16 27 28 26 23 32 30 13 22 33 29 25 39 31 37 36 35 34 41 46 47 44 45 38 19 24 48 43 40 56 10 50 54 59 60 53 42 63 57 64 65 51 49 58 62 71 69 68 67 73 55 78 79 70 72 76 66 61 84 74 52 87 89 85 77 86 90 94 81 83 80 75 82 100 91 98 88 99 104 93 105 92 ... 1222 1229 1238 1237 1240 1234 1244 1221 1241 1233 1243 1249 1236 1245 1252 1251 1256 1247 1246 1258 1253 1259 1250 1255 1262 1254 1266 1248 1242 1239 1260 1268 1272 1269 1257 1264 1275 1276 1277 1270 1274 1273 1263 1282 1271 1281 1280 1283 1267 1289 1290 1265 1279 1291 1285 1294 1278 1297 1296 1293 1261 1288 1302 1300 1304 1303 1299 1307 1298 1286 1306 1305 1308 1295 1284 1315 1312 1301 1292 1314 1319 1320 1317 1323 1287 1324 1316 1310 1322 1325 1327 1328 1309 1313 1326 1330 1318 1311 1321 1329

size is 1331
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 9 2 11 3 4 5 12 6 7 18 20 8 23 15 10 14 21 19 29 16 31 32 30 27 22 13 33 36 24 17 25 42 35 37 43 34 28 26 49 38 40 50 39 47 41 46 44 52 55 45 56 59 53 62 51 58 64 66 57 67 69 72 48 71 73 70 76 60 68 79 80 77 78 74 63 84 86 61 81 65 88 91 93 54 87 82 85 89 98 99 92 90 94 101 102 95 96 ... 1238 1237 1241 1240 1231 1228 1243 1239 1235 1245 1234 1226 1246 1242 1254 1251 1250 1257 1247 1252 1255 1259 1262 1249 1256 1236 1260 1244 1268 1248 1266 1271 1253 1263 1270 1269 1272 1258 1277 1278 1274 1275 1276 1279 1261 1283 1281 1267 1284 1280 1286 1290 1265 1293 1264 1292 1291 1295 1297 1289 1285 1282 1301 1288 1303 1304 1305 1287 1273 1308 1306 1307 1298 1300 1309 1313 1316 1299 1310 1317 1318 1315 1322 1294 1321 1302 1311 1327 1328 1324 1312 1320 1296 1323 1329 1319 1326 1325 1330 1314

size is 1332
items: [1,1,[2]]
size is 2
--------------------------------------------------------------

Files yours and expected differ

YOUR RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 1 2 12 3 4 5 6 7 18 8 14 21 15 17 20 9 11 16 27 28 26 23 32 30 13 22 33 29 25 39 31 37 36 35 34 41 46 47 44 45 38 19 24 48 43 40 56 10 50 54 59 60 53 42 63 57 64 65 51 49 58 62 71 69 68 67 73 55 78 79 70 72 76 66 61 84 74 52 87 89 85 77 86 90 94 81 83 80 75 82 100 91 98 88 99 104 93 105 92 ... 1222 1229 1238 1237 1240 1234 1244 1221 1241 1233 1243 1249 1236 1245 1252 1251 1256 1247 1246 1258 1253 1259 1250 1255 1262 1254 1266 1248 1242 1239 1260 1268 1272 1269 1257 1264 1275 1276 1277 1270 1274 1273 1263 1282 1271 1281 1280 1283 1267 1289 1290 1265 1279 1291 1285 1294 1278 1297 1296 1293 1261 1288 1302 1300 1304 1303 1299 1307 1298 1286 1306 1305 1308 1295 1284 1315 1312 1301 1292 1314 1319 1320 1317 1323 1287 1324 1316 1310 1322 1325 1327 1328 1309 1313 1326 1330 1318 1311 1321 1329

size is 1331
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 9 2 11 3 4 5 12 6 7 18 20 8 23 15 10 14 21 19 29 16 31 32 30 27 22 13 33 36 24 17 25 42 35 37 43 34 28 26 49 38 40 50 39 47 41 46 44 52 55 45 56 59 53 62 51 58 64 66 57 67 69 72 48 71 73 70 76 60 68 79 80 77 78 74 63 84 86 61 81 65 88 91 93 54 87 82 85 89 98 99 92 90 94 101 102 95 96 ... 1238 1237 1241 1240 1231 1228 1243 1239 1235 1245 1234 1226 1246 1242 1254 1251 1250 1257 1247 1252 1255 1259 1262 1249 1256 1236 1260 1244 1268 1248 1266 1271 1253 1263 1270 1269 1272 1258 1277 1278 1274 1275 1276 1279 1261 1283 1281 1267 1284 1280 1286 1290 1265 1293 1264 1292 1291 1295 1297 1289 1285 1282 1301 1288 1303 1304 1305 1287 1273 1308 1306 1307 1298 1300 1309 1313 1316 1299 1310 1317 1318 1315 1322 1294 1321 1302 1311 1327 1328 1324 1312 1320 1296 1323 1329 1319 1326 1325 1330 1314

size is 1332
items: [1,1,[6]]
size is 2
--------------------------------------------------------------
Output does not match exactly; the test FAILED


TEST #25 (valgrind)
     test program is da-0-12.c


==27929== All heap blocks were freed -- no leaks are possible
==27929== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #26
     test program is da-0-13.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, unions
test size is 1994
p items: [[1]]
p items: [[1]]
p items: (displaying first and last 100 elements)
543 1091 1189 928 882 381 1562 1955 886 1154 469 1543 1295 1903 1801 1594 204 1712 1079 424 839 1158 749 1175 295 761 356 79 929 990 63 209 1696 578 504 152 1142 350 1484 626 1655 63 1709 235 386 1898 735 861 1484 1914 1515 621 1792 671 409 1323 878 724 1892 641 1099 1663 575 1171 296 1361 12 708 1552 791 1301 897 164 312 1396 1382 173 1154 153 1692 276 1898 1851 184 381 861 1608 78 1265 1468 1294 1835 1799 924 1288 1843 1365 1015 1992 335 ... 618 613 143 662 438 734 7 97 381 581 1124 1282 1739 1132 235 518 352 790 814 17 1905 160 1621 280 1097 669 987 1371 1961 1857 713 18 1125 253 1304 1212 424 1526 1874 1202 346 631 1046 780 1021 1555 141 1896 1848 1967 513 1811 1552 135 504 80 1258 1245 1510 657 1752 506 1155 177 2 33 817 746 570 1849 925 621 1876 1530 1183 476 1210 1975 144 336 854 556 501 895 1514 281 443 953 110 165 1620 1043 345 125 181 1782 1852 1335 490 949

q items: [[1]]
p size is 3988
q size is 0
p items: (displaying first and last 100 elements)
543 1091 270 1842 1189 928 882 381 1562 1955 129 26 204 886 1154 469 1543 1295 1903 1801 1594 204 961 1712 1079 424 839 242 1158 150 749 1175 295 761 1239 1235 356 79 929 555 1875 776 990 736 63 209 821 1696 578 504 1238 152 1142 1264 350 1108 1484 897 626 1655 63 1809 1709 235 386 1240 1191 965 1898 1891 735 861 1484 1571 1914 1515 621 813 1792 671 409 657 1323 878 1711 724 1892 1406 641 303 1307 1099 982 1663 248 575 1171 296 1361 12 ... 1225 947 1775 238 879 1657 785 831 1390 1427 805 976 1071 483 355 194 1404 559 700 1032 216 1461 1473 627 1612 1734 1888 1974 954 1353 1212 1718 1026 1625 765 1059 449 1899 1062 1751 1760 977 746 1988 1930 897 392 630 1446 1622 246 441 63 442 882 559 454 1984 1748 1125 930 829 1099 1190 1308 1622 1170 1069 701 309 1683 1633 1893 1463 1492 756 118 281 450 1312 133 697 1198 231 803 1139 904 862 109 220 794 981 81 1312 1562 1340 1019 1794 1251 1839

q items: [[1]]
p size is 7976
q size is 0
--------------------------------------------------------------

Your output matches exactly!


TEST #27 (valgrind)
     test program is da-0-13.c


==27977== All heap blocks were freed -- no leaks are possible
==27977== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #28
     test program is da-0-14.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, insertions at the tail
items: [[1]]
items: (displaying first and last 100 elements)
109937 125937 132272 18298 126247 144091 108800 84502 67013 143816 44209 103617 118084 28084 132820 96617 147250 26316 122344 58955 125371 116720 78714 124108 70505 137913 121589 82520 51756 7278 27701 51822 21934 78962 115909 88353 36447 99939 30783 34214 116461 138164 38146 102211 104613 47802 57705 80589 22083 139233 141788 3761 57148 144562 101072 111380 46387 2231 94717 96595 136092 104968 88342 39916 118433 14898 31223 62945 44519 98463 81767 136449 6036 57008 16447 73407 142322 112816 59416 107570 34209 133555 141127 75964 28496 104562 79755 82738 4181 108704 66675 17488 126966 64149 134201 59716 67511 78163 14259 89769 ... 45358 28880 113593 22576 43146 92934 13040 70008 143028 115367 123068 38441 131277 55766 115977 27240 88055 105576 128279 103682 105318 17361 33870 93559 105083 14452 22176 129006 89811 94538 28957 62608 22219 91985 140657 95248 16771 137658 44298 71860 57788 2020 61366 6742 11284 130290 67379 1574 127564 91261 62551 138685 72443 123120 54208 117287 54617 114122 94655 40484 66465 139336 59158 74606 78791 79431 125702 142825 118947 17215 7574 129473 98131 100334 59943 143045 7078 111416 118776 97278 47375 112234 90310 144546 67653 77897 62745 59579 146449 126986 145053 35129 99060 140527 28053 117732 109998 21829 31674 34054

size is 148836
items: (displaying first and last 100 elements)
109937 125937 132272 18298 126247 144091 108800 84502 67013 143816 44209 103617 118084 28084 132820 96617 147250 26316 122344 58955 125371 116720 78714 124108 70505 137913 121589 82520 51756 7278 27701 51822 21934 78962 115909 88353 36447 99939 30783 34214 116461 138164 38146 102211 104613 47802 57705 80589 22083 139233 141788 3761 57148 144562 101072 111380 46387 2231 94717 96595 136092 104968 88342 39916 118433 14898 31223 62945 44519 98463 81767 136449 6036 57008 16447 73407 142322 112816 59416 107570 34209 133555 141127 75964 28496 104562 79755 82738 4181 108704 66675 17488 126966 64149 134201 59716 67511 78163 14259 89769 ... 95392 77771 58859 48714 505 16993 24620 29309 87587 21414 47676 22056 57728 19126 25520 72230 83409 12155 91027 105723 88981 45986 102705 132051 12830 25663 49889 16030 112491 77023 72917 32247 143574 142915 105271 99457 144679 3338 65059 62166 62179 131552 128704 64006 104899 3695 134603 29627 80345 59427 45669 75353 77652 62221 58401 64921 56536 5973 117380 128764 55329 95581 90561 14759 71075 52007 6395 80416 50372 71079 40349 2678 105798 55450 791 140942 89997 90373 135056 46949 23639 25203 70637 107238 92577 74103 87642 3137 7593 112103 16126 57661 36217 53162 97487 1892 121228 144316 48030 8359

size is 297672
--------------------------------------------------------------

Your output matches exactly!


TEST #29 (valgrind)
     test program is da-0-14.c


==28025== All heap blocks were freed -- no leaks are possible
==28025== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #30
     test program is da-0-15.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, insertions and deletions at tail
items: [[1]]
items: (displaying first and last 100 elements)
55408 88359 49170 104885 67765 24724 51757 25785 36562 87107 20058 122678 94160 112414 27756 106197 51859 106220 91892 124818 34886 54614 98565 77048 85373 36364 30054 99882 8143 41216 93923 112758 50140 63658 89002 117905 88383 12119 64255 124945 19791 84313 118982 34516 117293 67303 12072 40511 94089 103964 36688 334 29938 55818 77382 115311 92182 28001 86552 20891 118423 101040 5008 39923 36058 14575 78393 124441 75900 14008 41310 16257 18886 80858 50773 7538 68726 62846 97255 34174 87375 54509 83714 37878 110327 81662 24549 123075 109663 31666 15325 99446 53272 69539 10728 9895 84114 89121 54901 80580 ... 41034 96402 80701 5916 45461 68911 56297 11506 35010 105000 64361 43879 31660 101433 40257 110149 89293 60954 24737 25242 67041 40854 105917 74302 42940 56172 51630 66080 120616 60666 71056 82215 77633 23116 8696 123094 92027 114200 55166 47603 90559 119527 91482 42784 12884 52305 73499 102178 33824 98236 47985 21430 10449 25261 95732 102596 81434 67928 40035 122615 49159 111091 76189 126792 54772 84885 41810 67365 70444 96976 114968 81568 8428 127015 44918 21312 99885 118417 123490 5068 8577 42835 26499 68232 117302 42796 42187 70095 31289 2788 113275 80448 34444 110029 127805 89217 66274 40975 77147 57283

size is 19658
items: (displaying first and last 100 elements)
55408 88359 49170 104885 67765 24724 51757 25785 36562 87107 20058 122678 94160 112414 27756 106197 51859 106220 91892 124818 34886 54614 98565 77048 85373 36364 30054 99882 8143 41216 93923 112758 50140 63658 89002 117905 88383 12119 64255 124945 19791 84313 118982 34516 117293 67303 12072 40511 94089 103964 36688 334 29938 55818 77382 115311 92182 28001 86552 20891 118423 101040 5008 39923 36058 14575 78393 124441 75900 14008 41310 16257 18886 80858 50773 7538 68726 62846 97255 34174 87375 54509 83714 37878 110327 81662 24549 123075 109663 31666 15325 99446 53272 69539 10728 9895 84114 89121 54901 80580 ... 33038 65594 122756 78376 108771 9555 125623 30227 73457 70387 38779 97500 41472 1675 122453 125240 61973 100873 55204 95824 222 24338 89004 94862 14291 16186 1606 2137 62982 128283 34991 16585 65237 29106 15526 94573 87867 12508 124800 81889 82895 84144 50749 44932 6385 44561 90737 68358 65999 66507 35541 66222 90845 45110 81649 25702 110503 83255 77045 94050 3463 112036 110635 68700 61707 126161 83838 70139 10029 562 23388 13489 84706 123343 107628 91091 88469 69724 30808 25828 7590 115556 92050 19001 81231 45058 44703 112299 48878 121748 77708 52341 105144 59702 41606 38210 57223 125444 108350 116458

size is 41773
--------------------------------------------------------------

Your output matches exactly!


TEST #31 (valgrind)
     test program is da-0-15.c


==28073== All heap blocks were freed -- no leaks are possible
==28073== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #32
     test program is da-0-16.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 1 2 12 3 14 15 11 13 4 10 16 19 22 5 6 7 25 26 23 27 21 18 8 30 33 17 24 36 38 29 39 28 32 41 40 42 43 45 44 48 34 46 35 20 31 52 54 9 47 57 58 49 50 51 59 61 66 62 63 37 64 71 53 67 73 72 55 56 74 75 78 76 60 79 65 82 70 80 85 77 68 69 90 83 92 87 88 93 96 91 98 86 102 81 95 89 94 84 105 ... 1941518 1941532 1941535 1941536 1941540 1941525 1941537 1941543 1941530 1941541 1941546 1941538 1941547 1941548 1941544 1941545 1941529 1941550 1941516 1941539 1941531 1941555 1941534 1941554 1941556 1941558 1941561 1941563 1941551 1941552 1941553 1941566 1941567 1941560 1941568 1941571 1941542 1941557 1941562 1941575 1941574 1941577 1941576 1941549 1941580 1941578 1941565 1941579 1941569 1941559 1941584 1941564 1941588 1941585 1941581 1941589 1941573 1941592 1941583 1941593 1941590 1941572 1941594 1941598 1941587 1941591 1941601 1941600 1941597 1941582 1941606 1941586 1941608 1941596 1941609 1941570 1941610 1941599 1941613 1941595 1941604 1941602 1941616 1941617 1941612 1941618 1941620 1941619 1941614 1941625 1941603 1941607 1941623 1941611 1941626 1941615 1941622 1941621 1941624 1941605

size is 1941627
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 2 3 4 14 10 5 16 6 9 7 21 22 8 15 23 24 26 20 13 17 11 27 31 32 25 35 29 33 39 34 18 19 38 40 28 44 12 43 41 36 50 47 30 48 53 54 49 45 57 58 61 42 59 52 55 62 37 56 67 64 46 69 73 71 70 75 60 63 77 51 74 68 79 82 66 86 83 85 78 89 72 91 76 92 93 87 88 96 99 81 80 102 101 104 95 90 84 ... 1941536 1941528 1941533 1941526 1941540 1941538 1941503 1941534 1941498 1941541 1941543 1941545 1941539 1941546 1941531 1941537 1941544 1941549 1941553 1941555 1941502 1941547 1941557 1941558 1941548 1941556 1941550 1941551 1941564 1941565 1941554 1941535 1941561 1941563 1941566 1941562 1941560 1941542 1941574 1941569 1941573 1941570 1941577 1941579 1941578 1941552 1941571 1941575 1941580 1941576 1941568 1941583 1941585 1941559 1941590 1941591 1941587 1941592 1941588 1941582 1941595 1941586 1941589 1941572 1941594 1941593 1941602 1941599 1941603 1941600 1941567 1941601 1941608 1941607 1941610 1941596 1941604 1941597 1941606 1941581 1941615 1941612 1941611 1941609 1941584 1941617 1941619 1941622 1941613 1941618 1941621 1941605 1941614 1941598 1941620 1941616 1941625 1941623 1941624 1941626

size is 1941628
items: [1,1,[2]]
size is 2
--------------------------------------------------------------

Files yours and expected differ

YOUR RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 1 2 12 3 14 15 11 13 4 10 16 19 22 5 6 7 25 26 23 27 21 18 8 30 33 17 24 36 38 29 39 28 32 41 40 42 43 45 44 48 34 46 35 20 31 52 54 9 47 57 58 49 50 51 59 61 66 62 63 37 64 71 53 67 73 72 55 56 74 75 78 76 60 79 65 82 70 80 85 77 68 69 90 83 92 87 88 93 96 91 98 86 102 81 95 89 94 84 105 ... 1941518 1941532 1941535 1941536 1941540 1941525 1941537 1941543 1941530 1941541 1941546 1941538 1941547 1941548 1941544 1941545 1941529 1941550 1941516 1941539 1941531 1941555 1941534 1941554 1941556 1941558 1941561 1941563 1941551 1941552 1941553 1941566 1941567 1941560 1941568 1941571 1941542 1941557 1941562 1941575 1941574 1941577 1941576 1941549 1941580 1941578 1941565 1941579 1941569 1941559 1941584 1941564 1941588 1941585 1941581 1941589 1941573 1941592 1941583 1941593 1941590 1941572 1941594 1941598 1941587 1941591 1941601 1941600 1941597 1941582 1941606 1941586 1941608 1941596 1941609 1941570 1941610 1941599 1941613 1941595 1941604 1941602 1941616 1941617 1941612 1941618 1941620 1941619 1941614 1941625 1941603 1941607 1941623 1941611 1941626 1941615 1941622 1941621 1941624 1941605

size is 1941627
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 2 3 4 14 10 5 16 6 9 7 21 22 8 15 23 24 26 20 13 17 11 27 31 32 25 35 29 33 39 34 18 19 38 40 28 44 12 43 41 36 50 47 30 48 53 54 49 45 57 58 61 42 59 52 55 62 37 56 67 64 46 69 73 71 70 75 60 63 77 51 74 68 79 82 66 86 83 85 78 89 72 91 76 92 93 87 88 96 99 81 80 102 101 104 95 90 84 ... 1941536 1941528 1941533 1941526 1941540 1941538 1941503 1941534 1941498 1941541 1941543 1941545 1941539 1941546 1941531 1941537 1941544 1941549 1941553 1941555 1941502 1941547 1941557 1941558 1941548 1941556 1941550 1941551 1941564 1941565 1941554 1941535 1941561 1941563 1941566 1941562 1941560 1941542 1941574 1941569 1941573 1941570 1941577 1941579 1941578 1941552 1941571 1941575 1941580 1941576 1941568 1941583 1941585 1941559 1941590 1941591 1941587 1941592 1941588 1941582 1941595 1941586 1941589 1941572 1941594 1941593 1941602 1941599 1941603 1941600 1941567 1941601 1941608 1941607 1941610 1941596 1941604 1941597 1941606 1941581 1941615 1941612 1941611 1941609 1941584 1941617 1941619 1941622 1941613 1941618 1941621 1941605 1941614 1941598 1941620 1941616 1941625 1941623 1941624 1941626

size is 1941628
items: [1,1,[6]]
size is 2
--------------------------------------------------------------
Output does not match exactly; the test FAILED


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #33
     test program is da-0-17.c (alloted time: 3s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 1 10 2 3 4 13 15 5 16 14 12 19 6 20 23 7 8 17 18 9 22 25 24 33 21 34 36 11 31 30 29 37 26 38 28 45 40 32 41 35 50 51 27 43 54 55 52 57 44 46 56 49 48 53 62 64 61 47 66 67 63 70 65 71 58 75 72 42 68 60 80 39 69 73 77 83 74 86 79 84 82 59 92 87 85 81 96 97 90 95 91 88 93 98 78 103 94 106 101 ... 2073512 2073528 2073531 2073529 2073514 2073530 2073525 2073517 2073534 2073537 2073540 2073535 2073538 2073543 2073544 2073546 2073526 2073532 2073536 2073548 2073545 2073542 2073552 2073533 2073539 2073549 2073556 2073558 2073555 2073551 2073560 2073553 2073563 2073550 2073547 2073527 2073567 2073561 2073565 2073564 2073559 2073541 2073568 2073566 2073573 2073562 2073557 2073571 2073554 2073574 2073580 2073581 2073576 2073582 2073578 2073585 2073583 2073569 2073570 2073586 2073591 2073589 2073584 2073593 2073594 2073595 2073577 2073590 2073596 2073598 2073601 2073572 2073602 2073587 2073603 2073579 2073604 2073606 2073608 2073600 2073597 2073599 2073605 2073611 2073588 2073610 2073615 2073618 2073592 2073620 2073609 2073614 2073621 2073612 2073575 2073613 2073617 2073619 2073616 2073607

size is 2073622
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 2 11 10 3 12 4 17 5 9 19 6 14 18 13 21 26 16 7 22 24 31 8 20 23 27 32 25 29 15 28 37 36 35 33 43 46 39 30 47 45 51 48 50 49 38 42 55 58 40 44 56 59 60 34 57 62 67 53 69 65 66 72 54 63 73 64 70 71 68 76 80 61 75 74 52 79 85 87 77 78 91 82 84 90 41 83 95 92 98 100 93 86 88 104 99 94 96 ... 2073527 2073519 2073528 2073529 2073535 2073525 2073532 2073537 2073538 2073536 2073515 2073530 2073524 2073541 2073534 2073526 2073533 2073547 2073543 2073546 2073539 2073549 2073531 2073545 2073542 2073556 2073540 2073548 2073553 2073557 2073554 2073555 2073559 2073551 2073565 2073563 2073566 2073568 2073562 2073564 2073550 2073569 2073552 2073561 2073573 2073570 2073567 2073574 2073575 2073572 2073580 2073558 2073578 2073581 2073582 2073544 2073579 2073571 2073577 2073586 2073560 2073590 2073589 2073584 2073585 2073595 2073597 2073583 2073587 2073576 2073593 2073601 2073600 2073596 2073604 2073606 2073592 2073607 2073591 2073602 2073608 2073609 2073603 2073611 2073599 2073614 2073598 2073615 2073605 2073610 2073617 2073616 2073621 2073619 2073612 2073588 2073620 2073594 2073613 2073618

size is 2073623
items: [1,1,[2]]
size is 2
--------------------------------------------------------------

Files yours and expected differ

YOUR RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 1 10 2 3 4 13 15 5 16 14 12 19 6 20 23 7 8 17 18 9 22 25 24 33 21 34 36 11 31 30 29 37 26 38 28 45 40 32 41 35 50 51 27 43 54 55 52 57 44 46 56 49 48 53 62 64 61 47 66 67 63 70 65 71 58 75 72 42 68 60 80 39 69 73 77 83 74 86 79 84 82 59 92 87 85 81 96 97 90 95 91 88 93 98 78 103 94 106 101 ... 2073512 2073528 2073531 2073529 2073514 2073530 2073525 2073517 2073534 2073537 2073540 2073535 2073538 2073543 2073544 2073546 2073526 2073532 2073536 2073548 2073545 2073542 2073552 2073533 2073539 2073549 2073556 2073558 2073555 2073551 2073560 2073553 2073563 2073550 2073547 2073527 2073567 2073561 2073565 2073564 2073559 2073541 2073568 2073566 2073573 2073562 2073557 2073571 2073554 2073574 2073580 2073581 2073576 2073582 2073578 2073585 2073583 2073569 2073570 2073586 2073591 2073589 2073584 2073593 2073594 2073595 2073577 2073590 2073596 2073598 2073601 2073572 2073602 2073587 2073603 2073579 2073604 2073606 2073608 2073600 2073597 2073599 2073605 2073611 2073588 2073610 2073615 2073618 2073592 2073620 2073609 2073614 2073621 2073612 2073575 2073613 2073617 2073619 2073616 2073607

size is 2073622
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 2 11 10 3 12 4 17 5 9 19 6 14 18 13 21 26 16 7 22 24 31 8 20 23 27 32 25 29 15 28 37 36 35 33 43 46 39 30 47 45 51 48 50 49 38 42 55 58 40 44 56 59 60 34 57 62 67 53 69 65 66 72 54 63 73 64 70 71 68 76 80 61 75 74 52 79 85 87 77 78 91 82 84 90 41 83 95 92 98 100 93 86 88 104 99 94 96 ... 2073527 2073519 2073528 2073529 2073535 2073525 2073532 2073537 2073538 2073536 2073515 2073530 2073524 2073541 2073534 2073526 2073533 2073547 2073543 2073546 2073539 2073549 2073531 2073545 2073542 2073556 2073540 2073548 2073553 2073557 2073554 2073555 2073559 2073551 2073565 2073563 2073566 2073568 2073562 2073564 2073550 2073569 2073552 2073561 2073573 2073570 2073567 2073574 2073575 2073572 2073580 2073558 2073578 2073581 2073582 2073544 2073579 2073571 2073577 2073586 2073560 2073590 2073589 2073584 2073585 2073595 2073597 2073583 2073587 2073576 2073593 2073601 2073600 2073596 2073604 2073606 2073592 2073607 2073591 2073602 2073608 2073609 2073603 2073611 2073599 2073614 2073598 2073615 2073605 2073610 2073617 2073616 2073621 2073619 2073612 2073588 2073620 2073594 2073613 2073618

size is 2073623
items: [1,1,[6]]
size is 2
--------------------------------------------------------------
Output does not match exactly; the test FAILED


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o


TEST #34
     test program is da-0-18.c (alloted time: 3s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 10 1 2 12 3 11 14 4 5 15 6 17 20 7 24 13 19 27 23 22 29 26 30 25 31 34 8 36 32 18 28 16 39 38 33 41 44 9 47 42 48 46 40 37 51 35 45 50 56 43 54 49 55 62 63 58 52 57 65 68 21 53 69 64 60 67 73 61 71 74 70 66 72 77 81 82 75 84 83 80 59 85 91 88 90 94 78 97 92 89 93 100 101 98 102 87 104 76 96 ... 2117984 2117987 2117976 2117981 2117993 2117989 2117986 2117991 2117978 2117994 2117999 2117998 2117974 2117997 2118003 2117992 2118005 2118001 2118002 2117995 2117950 2118009 2118007 2118004 2118008 2118015 2118010 2118011 2117996 2118006 2118012 2118018 2118021 2118020 2118013 2118024 2118022 2118000 2118017 2117990 2118028 2118030 2118019 2118032 2118026 2118023 2118025 2118033 2118029 2118038 2118014 2118037 2118036 2118016 2118031 2118043 2118044 2118034 2118045 2118047 2118050 2118046 2118042 2118040 2118035 2118053 2118049 2118057 2118052 2118041 2118039 2118054 2118055 2118048 2118058 2118056 2118051 2118062 2118065 2118067 2118061 2118070 2118060 2118071 2118072 2118066 2118059 2118063 2118073 2118074 2118075 2118069 2118080 2118068 2118079 2118078 2118076 2118027 2118064 2118077

size is 2118081
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 2 9 12 13 3 4 5 6 16 17 21 22 15 23 7 20 19 25 28 26 29 8 10 11 32 27 14 37 39 24 31 33 40 18 35 34 41 43 36 45 42 51 38 46 50 53 54 44 58 30 49 55 57 63 47 56 62 65 52 48 68 64 70 74 75 67 72 78 60 69 59 79 76 81 83 82 80 71 88 61 91 90 84 94 87 66 85 93 99 95 86 101 89 92 77 100 96 ... 2117984 2117970 2117976 2117988 2117978 2117992 2117987 2117991 2117996 2117997 2117994 2118000 2117983 2117973 2118003 2117993 2118002 2117990 2118008 2118001 2118007 2118011 2118012 2118013 2118009 2118005 2118004 2118017 2118006 2117999 2118020 2118021 2118010 2118018 2118015 2118023 2117998 2118025 2118019 2117995 2117989 2118014 2118028 2118032 2118024 2118029 2118031 2118036 2118030 2118039 2118040 2118016 2118022 2118042 2118043 2118041 2118035 2118044 2118034 2118027 2118047 2118026 2118046 2118038 2118054 2118033 2118037 2118049 2118055 2118050 2118059 2118058 2118053 2118051 2118060 2118065 2118052 2118048 2118063 2118064 2118061 2118067 2118062 2118056 2118070 2118075 2118069 2118076 2118057 2118079 2118077 2118078 2118073 2118045 2118072 2118068 2118066 2118074 2118071 2118080

size is 2118082
items: [1,1,[2]]
size is 2
--------------------------------------------------------------

Files yours and expected differ

YOUR RESULTS:
--------------------------------------------------------------
INTEGER test of DA, delete all
items: [[1]]
items: (displaying first and last 100 elements)
0 10 1 2 12 3 11 14 4 5 15 6 17 20 7 24 13 19 27 23 22 29 26 30 25 31 34 8 36 32 18 28 16 39 38 33 41 44 9 47 42 48 46 40 37 51 35 45 50 56 43 54 49 55 62 63 58 52 57 65 68 21 53 69 64 60 67 73 61 71 74 70 66 72 77 81 82 75 84 83 80 59 85 91 88 90 94 78 97 92 89 93 100 101 98 102 87 104 76 96 ... 2117984 2117987 2117976 2117981 2117993 2117989 2117986 2117991 2117978 2117994 2117999 2117998 2117974 2117997 2118003 2117992 2118005 2118001 2118002 2117995 2117950 2118009 2118007 2118004 2118008 2118015 2118010 2118011 2117996 2118006 2118012 2118018 2118021 2118020 2118013 2118024 2118022 2118000 2118017 2117990 2118028 2118030 2118019 2118032 2118026 2118023 2118025 2118033 2118029 2118038 2118014 2118037 2118036 2118016 2118031 2118043 2118044 2118034 2118045 2118047 2118050 2118046 2118042 2118040 2118035 2118053 2118049 2118057 2118052 2118041 2118039 2118054 2118055 2118048 2118058 2118056 2118051 2118062 2118065 2118067 2118061 2118070 2118060 2118071 2118072 2118066 2118059 2118063 2118073 2118074 2118075 2118069 2118080 2118068 2118079 2118078 2118076 2118027 2118064 2118077

size is 2118081
items: [1,[0]]
size is 1
items: (displaying first and last 100 elements)
1 0 1 2 9 12 13 3 4 5 6 16 17 21 22 15 23 7 20 19 25 28 26 29 8 10 11 32 27 14 37 39 24 31 33 40 18 35 34 41 43 36 45 42 51 38 46 50 53 54 44 58 30 49 55 57 63 47 56 62 65 52 48 68 64 70 74 75 67 72 78 60 69 59 79 76 81 83 82 80 71 88 61 91 90 84 94 87 66 85 93 99 95 86 101 89 92 77 100 96 ... 2117984 2117970 2117976 2117988 2117978 2117992 2117987 2117991 2117996 2117997 2117994 2118000 2117983 2117973 2118003 2117993 2118002 2117990 2118008 2118001 2118007 2118011 2118012 2118013 2118009 2118005 2118004 2118017 2118006 2117999 2118020 2118021 2118010 2118018 2118015 2118023 2117998 2118025 2118019 2117995 2117989 2118014 2118028 2118032 2118024 2118029 2118031 2118036 2118030 2118039 2118040 2118016 2118022 2118042 2118043 2118041 2118035 2118044 2118034 2118027 2118047 2118026 2118046 2118038 2118054 2118033 2118037 2118049 2118055 2118050 2118059 2118058 2118053 2118051 2118060 2118065 2118052 2118048 2118063 2118064 2118061 2118067 2118062 2118056 2118070 2118075 2118069 2118076 2118057 2118079 2118077 2118078 2118073 2118045 2118072 2118068 2118066 2118074 2118071 2118080

size is 2118082
items: [1,1,[6]]
size is 2
--------------------------------------------------------------
Output does not match exactly; the test FAILED



!! TRYING YOUR CDA MODULE WITH ALTERNATE CODE

!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #35
     test program is cda-0-0.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, simple
items: ((1))
items: (4,3,2,1,(0))
items: (4,3,2,4,1,3,2,1)
items: (4,2,4,1,3,2,1)
items: (4,2,4,1,3,2)
items: (2,4,1,3,2)
items: (4,1,3,2)
size: 4
--------------------------------------------------------------

Your output matches exactly!


TEST #36 (valgrind)
     test program is cda-0-0.c


==28245== All heap blocks were freed -- no leaks are possible
==28245== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #37
     test program is cda-0-1.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
REAL test of CDA, simple
items: ((1))
items: (4.400000,3.300000,2.200000,1.100000,(0))
items: (4.400000,3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,1.100000)
items: (4.400000,2.200000,4.400000,1.100000,3.300000,2.200000,1.100000)
items: (4.400000,2.200000,4.400000,1.100000,3.300000,2.200000)
items: (2.200000,4.400000,1.100000,3.300000,2.200000)
items: (4.400000,1.100000,3.300000,2.200000)
size: 4
--------------------------------------------------------------

Your output matches exactly!


TEST #38 (valgrind)
     test program is cda-0-1.c


==28293== All heap blocks were freed -- no leaks are possible
==28293== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #39
     test program is cda-0-2.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
STRING test of CDA, simple
items: ((1))
items: (a4,a3,a2,a1,(0))
items: (a4,a3,a2,a4,a1,a3,a2,a1)
items: (a4,a2,a4,a1,a3,a2,a1)
items: (a4,a2,a4,a1,a3,a2)
items: (a2,a4,a1,a3,a2)
items: (a4,a1,a3,a2)
size: 4
--------------------------------------------------------------

Your output matches exactly!


TEST #40 (valgrind)
     test program is cda-0-2.c


==28341== All heap blocks were freed -- no leaks are possible
==28341== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #41
     test program is cda-0-3.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, random insertions
items: ((1))
items: (35,60,43,87,120,118,10,84,121,93,31,4,30,10,31,77,49,67,40,53,2,91,91,38,99,84,95,59,117,56,20,112,60,61,100,118,12,83,118,119,66,129,112,32,23,78,51,91,23,25,10,69,63,105,73,122,108,128,90,38,20,65,48,46,43,56,27,93,1,112,38,119,43,47,104,103,17,119,72,70,13,43,122,71,0,9,88,5,80,40,83,63,76,125,45,60,8,73,87,8,109,129,68,85,86,74,128,66,119,12,2,120,35,32,11,119,75,19,21,78,33,65,86,51,67,42,33,59,114,3,78,(125))
size is 131
items: (displaying first and last 100 elements)
35 60 29 43 112 123 87 42 120 118 96 87 10 84 94 79 64 121 93 31 4 30 74 10 52 31 77 49 15 67 40 53 15 34 2 48 33 91 91 38 99 28 84 95 59 27 116 107 124 1 67 117 56 103 46 76 124 24 20 20 112 52 60 61 66 31 26 100 118 84 62 78 120 118 12 83 118 106 119 66 28 65 17 2 129 112 32 23 78 126 76 78 40 38 0 116 51 26 32 91 ... 88 110 13 43 79 122 60 71 0 24 42 55 9 88 21 5 80 81 40 103 83 122 63 76 125 45 60 10 8 73 87 38 8 92 109 6 27 97 129 68 85 86 74 128 66 119 80 100 15 7 12 2 120 81 35 111 32 101 11 60 34 119 75 57 62 19 31 21 4 78 101 8 33 39 65 72 86 49 96 51 119 66 61 67 103 42 97 114 43 129 33 59 114 3 68 36 78 32 102 108

size is 262
--------------------------------------------------------------

Your output matches exactly!


TEST #42 (valgrind)
     test program is cda-0-3.c



YOUR RESULTS:
--------------------------------------------------------------
==28389== Memcheck, a memory error detector
==28389== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==28389== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==28389== Command: ./testdir-cda/cda-0-3
==28389== 
==28389== 
==28389== HEAP SUMMARY:
==28389==     in use at exit: 1,048 bytes in 262 blocks
==28389==   total heap usage: 274 allocs, 12 frees, 9,264 bytes allocated
==28389== 
==28389== LEAK SUMMARY:
==28389==    definitely lost: 1,048 bytes in 262 blocks
==28389==    indirectly lost: 0 bytes in 0 blocks
==28389==      possibly lost: 0 bytes in 0 blocks
==28389==    still reachable: 0 bytes in 0 blocks
==28389==         suppressed: 0 bytes in 0 blocks
==28389== Rerun with --leak-check=full to see details of leaked memory
==28389== 
==28389== For counts of detected and suppressed errors, rerun with: -v
==28389== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
--------------------------------------------------------------
There seem to be memory problems; the test FAILED


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #43
     test program is cda-0-4.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions at the front
items: ((1))
items: (19,106,8,39,116,32,2,27,44,99,60,105,84,55,8,58,33,55,46,76,36,43,62,25,120,51,5,60,13,57,50,17,68,96,10,26,34,23,0,8,28,56,116,59,93,66,69,14,44,122,15,10,71,41,9,118,101,102,120,11,20,73,89,94,101,114,32,91,21,3,87,61,121,50,120,1,14,54,93,78,33,41,27,94,38,58,28,11,12,90,64,113,58,91,42,52,85,113,97,93,76,37,110,88,78,10,65,49,84,96,52,8,81,54,39,78,20,35,110,26,73,45,26,110,50,(3))
size is 125
items: (displaying first and last 100 elements)
21 56 41 15 108 85 39 28 68 91 59 102 24 20 71 120 21 51 14 83 75 63 67 83 123 106 119 40 44 72 51 98 45 85 75 123 8 54 121 25 0 83 113 33 44 120 39 40 75 124 22 54 96 57 9 41 6 106 48 2 18 34 122 93 79 82 82 16 59 103 48 5 90 34 27 107 50 0 8 27 11 103 52 20 103 63 85 105 80 95 52 71 87 31 12 50 89 87 11 98 ... 51 5 60 13 57 50 17 68 96 10 26 34 23 0 8 28 56 116 59 93 66 69 14 44 122 15 10 71 41 9 118 101 102 120 11 20 73 89 94 101 114 32 91 21 3 87 61 121 50 120 1 14 54 93 78 33 41 27 94 38 58 28 11 12 90 64 113 58 91 42 52 85 113 97 93 76 37 110 88 78 10 65 49 84 96 52 8 81 54 39 78 20 35 110 26 73 45 26 110 50

size is 250
--------------------------------------------------------------
cda-0-4: cda.c:184: setCDA: Assertion `index >= 0 && index <= items->size' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 28429 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions at the front
items: ((1))
cda-0-4: cda.c:184: setCDA: Assertion `index >= 0 && index <= items->size' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point


TEST #44 (valgrind)
     test program is cda-0-4.c

./valgrind-tester: line 29: 28445 Aborted                 timeout $alloted valgrind ./$testdir/$tester $args > /dev/null 2> yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
==28451== Memcheck, a memory error detector
==28451== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==28451== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==28451== Command: ./testdir-cda/cda-0-4
==28451== 
INTEGER test of CDA, insertions at the front
items: ((1))
cda-0-4: cda.c:184: setCDA: Assertion `index >= 0 && index <= items->size' failed.
==28451== 
==28451== Process terminating with default action of signal 6 (SIGABRT)
==28451==    at 0x406FEA9: raise (raise.c:54)
==28451==    by 0x4071406: abort (abort.c:89)
==28451==    by 0x4068D06: __assert_fail_base (assert.c:92)
==28451==    by 0x4068D8A: __assert_fail (assert.c:101)
==28451==    by 0x8049422: setCDA (cda.c:184)
==28451==    by 0x8048870: main (tester.c:60)
==28451== 
==28451== HEAP SUMMARY:
==28451==     in use at exit: 36 bytes in 3 blocks
==28451==   total heap usage: 6 allocs, 3 frees, 1,244 bytes allocated
==28451== 
==28451== LEAK SUMMARY:
==28451==    definitely lost: 0 bytes in 0 blocks
==28451==    indirectly lost: 0 bytes in 0 blocks
==28451==      possibly lost: 0 bytes in 0 blocks
==28451==    still reachable: 36 bytes in 3 blocks
==28451==         suppressed: 0 bytes in 0 blocks
==28451== Rerun with --leak-check=full to see details of leaked memory
==28451== 
==28451== For counts of detected and suppressed errors, rerun with: -v
==28451== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #45
     test program is cda-0-5.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions at the tail
items: ((1))
items: (71,143,79,47,90,73,132,9,30,127,7,45,25,5,11,31,72,135,54,140,109,2,93,34,92,105,73,6,65,114,39,30,41,135,70,92,52,132,125,131,40,38,109,73,76,113,45,98,31,43,82,131,100,141,142,6,72,7,109,68,139,13,47,141,67,40,32,144,146,71,121,33,142,97,2,139,69,57,125,55,96,53,127,122,46,135,142,83,90,89,58,105,83,104,74,122,125,10,95,98,48,21,124,38,146,9,58,53,139,72,38,95,82,137,109,31,42,70,28,83,87,101,78,9,24,142,138,107,65,120,54,64,84,114,104,0,1,59,117,9,11,86,111,102,11,73,95,23,133,(107))
size is 149
items: (displaying first and last 100 elements)
71 143 79 47 90 73 132 9 30 127 7 45 25 5 11 31 72 135 54 140 109 2 93 34 92 105 73 6 65 114 39 30 41 135 70 92 52 132 125 131 40 38 109 73 76 113 45 98 31 43 82 131 100 141 142 6 72 7 109 68 139 13 47 141 67 40 32 144 146 71 121 33 142 97 2 139 69 57 125 55 96 53 127 122 46 135 142 83 90 89 58 105 83 104 74 122 125 10 95 98 ... 126 28 80 18 22 99 33 73 109 34 138 85 23 10 18 69 140 127 51 17 0 93 42 102 129 5 69 70 107 55 49 120 93 122 114 78 117 8 51 22 107 10 139 140 21 83 42 121 23 141 104 112 113 103 92 56 25 98 17 122 146 139 120 36 66 141 128 114 75 118 56 89 122 106 138 49 145 46 11 120 140 119 67 74 14 42 89 22 40 64 68 37 24 31 47 133 124 19 58 56

size is 298
--------------------------------------------------------------

Your output matches exactly!


TEST #46 (valgrind)
     test program is cda-0-5.c


==28502== All heap blocks were freed -- no leaks are possible
==28502== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #47
     test program is cda-0-6.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, random insertions and deletions
items: ((1))
items: (81,74,10,109,117,75,44,102,83,12,12,68,38,21,95,16,6,70,37,61,10,114,62,4,39,6,89,14,51,85,38,77,15,32,46,10,104,15,69,113,90,21,7,120,33,30,46,23,23,12,35,(77))
size is 51
items: (47,81,74,12,10,90,51,71,29,109,9,117,75,73,18,102,53,84,46,83,12,12,13,64,112,68,15,21,95,75,16,114,19,18,70,59,70,37,61,44,51,53,40,81,99,95,62,106,92,106,4,112,62,50,21,97,39,105,44,33,89,22,24,8,92,76,51,88,51,52,77,15,11,59,32,10,56,100,94,28,28,91,44,113,14,90,84,26,93,41,88,20,120,88,30,46,23,40,38,42,35,(155))
size is 101
--------------------------------------------------------------

Your output matches exactly!


TEST #48 (valgrind)
     test program is cda-0-6.c


==28550== All heap blocks were freed -- no leaks are possible
==28550== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #49
     test program is cda-0-7.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions and deletions at front
items: ((1))
items: (32,140,81,3,24,44,36,103,17,33,121,133,114,151,105,55,64,108,69,86,148,69,70,19,150,87,72,137,114,7,7,29,116,36,122,75,27,3,137,39,75,126,28,61,89,153,141,132,113,0,18,129,74,139,103,13,126,66,132,87,45,124,63,43,11,119,93,144,83,13,11,16,38,28,(182))
size is 74
items: (26,13,111,79,137,116,50,34,151,144,59,3,69,77,36,146,62,50,139,90,67,59,79,23,132,123,9,60,75,88,118,103,31,32,140,81,3,24,44,36,103,17,33,121,133,114,151,105,55,64,108,69,86,148,69,70,19,150,87,72,137,114,7,7,29,116,36,122,75,27,3,137,39,75,126,28,61,89,153,141,132,113,0,18,129,74,139,103,13,126,66,132,87,45,124,63,43,11,119,93,144,83,13,11,16,38,28,(149))
size is 107
--------------------------------------------------------------

Your output matches exactly!


TEST #50 (valgrind)
     test program is cda-0-7.c


==28598== All heap blocks were freed -- no leaks are possible
==28598== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #51
     test program is cda-0-8.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions and deletions at tail
items: ((1))
items: (133,138,39,101,13,27,47,78,100,35,67,136,22,90,132,50,139,41,19,34,13,86,5,134,25,92,12,73,36,47,44,20,36,93,131,60,120,39,148,81,74,67,78,96,18,72,146,8,113,27,53,126,123,58,111,9,2,134,82,(69))
size is 59
items: (133,138,39,101,13,27,47,78,100,35,67,136,22,90,132,50,139,41,19,34,13,86,5,134,25,92,12,73,36,47,44,20,36,93,131,60,120,39,148,81,74,67,78,96,18,72,146,8,113,27,53,126,123,58,111,9,2,134,82,45,114,66,12,135,88,14,68,126,51,115,130,132,2,143,25,100,(180))
size is 76
--------------------------------------------------------------

Your output matches exactly!


TEST #52 (valgrind)
     test program is cda-0-8.c


==28646== All heap blocks were freed -- no leaks are possible
==28646== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #53
     test program is cda-0-9.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (123,96,92,93,116,127,128,132,121,125,108,122,35,109,84,75,79,111,107,101,78,103,62,87,74,91,89,88,57,34,82,64,60,54,13,14,69,43,53,44,17,25,4,41,40,2,37,28,1,30,11,21,0,24,19,3,15,5,6,20,16,12,10,27,23,26,7,18,36,8,31,9,39,42,38,33,46,50,51,22,48,58,32,45,29,63,49,56,68,55,59,47,65,52,72,66,61,83,77,73,67,76,86,80,71,81,90,104,105,102,106,85,95,112,70,98,118,113,119,110,115,94,126,97,129,100,117,99,124,114,131,120,130,(123))
size is 133
items: (1,(0))
size is 1
items: (117,58,125,132,87,94,129,126,115,113,109,128,122,124,116,103,108,114,106,100,89,70,97,93,98,65,83,66,96,88,64,49,72,61,69,73,30,6,62,13,4,28,26,52,60,25,54,29,51,50,34,42,36,32,31,10,17,3,18,1,11,24,0,16,1,14,15,20,2,21,23,19,5,27,38,7,41,9,39,35,37,22,44,45,47,8,56,40,57,67,46,33,55,74,71,68,63,75,80,43,53,76,84,85,77,59,81,92,78,91,90,99,101,86,95,105,112,118,102,82,48,12,104,119,79,131,107,130,110,121,120,111,127,123,(122))
size is 134
items: (1,0,(2))
size is 2
--------------------------------------------------------------
timeout: the monitored command dumped core
./module-tester: line 35: 28686 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (123,96,92,93,116,127,128,132,121,125,108,122,35,109,84,75,79,111,107,101,78,103,62,87,74,91,89,88,57,34,82,64,60,54,13,14,69,43,53,44,17,25,4,41,40,2,37,28,1,30,11,21,0,24,19,3,15,5,6,20,16,12,10,27,23,26,7,18,36,8,31,9,39,42,38,33,46,50,51,22,48,58,32,45,29,63,49,56,68,55,59,47,65,52,72,66,61,83,77,73,67,76,86,80,71,81,90,104,105,102,106,85,95,112,70,98,118,113,119,110,115,94,126,97,129,100,117,99,124,114,131,120,130,(123))
size is 133
items: (165123400,(3))
size is 1
items: (117,58,125,132,87,94,129,126,115,113,109,128,122,124,116,103,108,114,106,100,89,70,97,93,98,65,83,66,96,88,64,49,72,61,69,73,30,6,62,13,4,28,26,52,60,25,54,29,51,50,34,42,36,32,31,10,17,3,18,1,11,24,0,16,165123400,14,15,20,2,21,23,19,5,27,38,7,41,9,39,35,37,22,44,45,47,8,56,40,57,67,46,33,55,74,71,68,63,75,80,43,53,76,84,85,77,59,81,92,78,91,90,99,101,86,95,105,112,118,102,82,48,12,104,119,79,131,107,130,110,121,120,111,127,123,(122))
size is 134
*** Error in `./testdir-cda/cda-0-9': double free or corruption (out): 0x09d79620 ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x67377)[0xb75e0377]
/lib/i386-linux-gnu/libc.so.6(+0x6d2f7)[0xb75e62f7]
/lib/i386-linux-gnu/libc.so.6(+0x6dc31)[0xb75e6c31]
./testdir-cda/cda-0-9[0x8048aef]
./testdir-cda/cda-0-9[0x8048956]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf7)[0xb7591637]
./testdir-cda/cda-0-9[0x8048561]
======= Memory map: ========
08048000-0804b000 r-xp 00000000 fc:00 675030     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-9
0804b000-0804c000 r--p 00002000 fc:00 675030     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-9
0804c000-0804d000 rw-p 00003000 fc:00 675030     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-9
09d79000-09d9a000 rw-p 00000000 00:00 0          [heap]
b7400000-b7421000 rw-p 00000000 00:00 0 
b7421000-b7500000 ---p 00000000 00:00 0 
b7550000-b756c000 r-xp 00000000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b756c000-b756d000 rw-p 0001b000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b7578000-b7579000 rw-p 00000000 00:00 0 
b7579000-b7729000 r-xp 00000000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b7729000-b772b000 r--p 001af000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b772b000-b772c000 rw-p 001b1000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b772c000-b772f000 rw-p 00000000 00:00 0 
b7739000-b773b000 rw-p 00000000 00:00 0 
b773b000-b773e000 r--p 00000000 00:00 0          [vvar]
b773e000-b773f000 r-xp 00000000 00:00 0          [vdso]
b773f000-b7762000 r-xp 00000000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b7762000-b7763000 r--p 00022000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b7763000-b7764000 rw-p 00023000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
bfd09000-bfd2a000 rw-p 00000000 00:00 0          [stack]
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point


TEST #54 (valgrind)
     test program is cda-0-9.c

./valgrind-tester: line 29: 28702 Segmentation fault      timeout $alloted valgrind ./$testdir/$tester $args > /dev/null 2> yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
==28708== Memcheck, a memory error detector
==28708== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==28708== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==28708== Command: ./testdir-cda/cda-0-9
==28708== 
INTEGER test of CDA, delete all
items: ((1))
items: (123,96,92,93,116,127,128,132,121,125,108,122,35,109,84,75,79,111,107,101,78,103,62,87,74,91,89,88,57,34,82,64,60,54,13,14,69,43,53,44,17,25,4,41,40,2,37,28,1,30,11,21,0,24,19,3,15,5,6,20,16,12,10,27,23,26,7,18,36,8,31,9,39,42,38,33,46,50,51,22,48,58,32,45,29,63,49,56,68,55,59,47,65,52,72,66,61,83,77,73,67,76,86,80,71,81,90,104,105,102,106,85,95,112,70,98,118,113,119,110,115,94,126,97,129,100,117,99,124,114,131,120,130,(123))
size is 133
==28708== Use of uninitialised value of size 4
==28708==    at 0x8048A32: getINTEGER (integer.c:26)
==28708==    by 0x8048A8B: displayINTEGER (integer.c:43)
==28708==    by 0x804962C: displayCDA (cda.c:211)
==28708==    by 0x804867A: display (tester.c:18)
==28708==    by 0x804899F: main (tester.c:71)
==28708== 
==28708== Invalid read of size 4
==28708==    at 0x8048A32: getINTEGER (integer.c:26)
==28708==    by 0x8048A8B: displayINTEGER (integer.c:43)
==28708==    by 0x804962C: displayCDA (cda.c:211)
==28708==    by 0x804867A: display (tester.c:18)
==28708==    by 0x804899F: main (tester.c:71)
==28708==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==28708== 
==28708== 
==28708== Process terminating with default action of signal 11 (SIGSEGV)
==28708==  Access not within mapped region at address 0x0
==28708==    at 0x8048A32: getINTEGER (integer.c:26)
==28708==    by 0x8048A8B: displayINTEGER (integer.c:43)
==28708==    by 0x804962C: displayCDA (cda.c:211)
==28708==    by 0x804867A: display (tester.c:18)
==28708==    by 0x804899F: main (tester.c:71)
==28708==  If you believe this happened as a result of a stack
==28708==  overflow in your program's main thread (unlikely but
==28708==  possible), you can try to increase the size of the
==28708==  main thread stack using the --main-stacksize= flag.
==28708==  The main thread stack size used in this run was 8388608.
items: (==28708== 
==28708== HEAP SUMMARY:
==28708==     in use at exit: 48 bytes in 3 blocks
==28708==   total heap usage: 151 allocs, 148 frees, 4,640 bytes allocated
==28708== 
==28708== LEAK SUMMARY:
==28708==    definitely lost: 0 bytes in 0 blocks
==28708==    indirectly lost: 0 bytes in 0 blocks
==28708==      possibly lost: 0 bytes in 0 blocks
==28708==    still reachable: 48 bytes in 3 blocks
==28708==         suppressed: 0 bytes in 0 blocks
==28708== Rerun with --leak-check=full to see details of leaked memory
==28708== 
==28708== For counts of detected and suppressed errors, rerun with: -v
==28708== Use --track-origins=yes to see where uninitialised values come from
==28708== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #55
     test program is cda-0-10.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, random insertions
items: ((1))
items: (displaying first and last 100 elements)
957 1072 546 427 41 9 292 450 592 102 456 409 1156 78 664 1 333 901 412 199 1041 135 857 1183 493 1014 1170 166 1051 459 342 806 182 1206 654 132 135 452 181 385 663 926 1025 737 189 1197 38 438 94 945 164 926 582 105 348 785 113 197 288 140 795 136 1055 766 533 1123 1011 121 1131 47 1021 332 579 590 1131 405 1039 1008 883 1060 1178 723 895 455 806 617 558 746 1100 317 392 298 62 963 1097 115 433 800 320 1053 ... 1184 552 1202 1018 905 1182 898 748 520 154 917 993 952 760 1197 993 417 1001 400 486 633 344 1040 1061 676 434 331 1241 124 313 692 874 1074 381 676 957 233 1143 1125 489 508 410 1243 1125 396 74 769 538 1214 790 618 1092 1172 410 840 168 395 1009 1249 709 214 551 819 28 208 1055 1138 233 542 647 851 1148 466 43 82 172 167 182 437 498 1050 864 161 870 802 1177 282 769 526 239 162 1144 89 90 32 222 235 742 840 1126

size is 1250
items: (displaying first and last 100 elements)
721 1033 957 1072 546 427 41 317 9 292 450 1076 939 592 780 102 456 386 972 349 1 409 1156 78 664 1 333 901 412 46 445 651 199 1041 53 135 857 1183 1162 883 192 493 1014 1170 166 970 1051 459 252 342 439 806 182 1206 654 132 135 452 181 385 663 1246 860 926 1025 1109 403 737 189 270 1197 38 873 438 94 945 164 926 237 295 115 919 160 582 105 1164 348 785 845 113 223 197 288 414 140 1028 795 136 1055 766 ... 2 819 869 1062 740 28 613 208 1055 85 1028 1138 684 443 233 393 542 836 1042 647 851 919 447 109 1098 1249 1127 1148 965 466 1222 43 467 883 373 275 82 172 220 167 225 594 1025 308 862 737 658 477 182 585 1042 261 330 437 498 1050 683 177 539 864 237 608 863 1159 414 675 154 161 1129 870 1159 802 79 1177 127 282 769 1013 526 124 239 1240 63 162 1 1144 89 90 484 32 90 809 222 235 742 634 615 1016 840 1126

size is 2500
--------------------------------------------------------------

Your output matches exactly!


TEST #56 (valgrind)
     test program is cda-0-10.c



YOUR RESULTS:
--------------------------------------------------------------
==28759== Memcheck, a memory error detector
==28759== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==28759== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==28759== Command: ./testdir-cda/cda-0-10
==28759== 
==28759== 
==28759== HEAP SUMMARY:
==28759==     in use at exit: 10,000 bytes in 2,500 blocks
==28759==   total heap usage: 2,515 allocs, 15 frees, 46,888 bytes allocated
==28759== 
==28759== LEAK SUMMARY:
==28759==    definitely lost: 10,000 bytes in 2,500 blocks
==28759==    indirectly lost: 0 bytes in 0 blocks
==28759==      possibly lost: 0 bytes in 0 blocks
==28759==    still reachable: 0 bytes in 0 blocks
==28759==         suppressed: 0 bytes in 0 blocks
==28759== Rerun with --leak-check=full to see details of leaked memory
==28759== 
==28759== For counts of detected and suppressed errors, rerun with: -v
==28759== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
--------------------------------------------------------------
There seem to be memory problems; the test FAILED


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #57
     test program is cda-0-11.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions at the tail
items: ((1))
items: (displaying first and last 100 elements)
858 406 1465 1227 1633 1714 339 1202 221 1227 1552 1346 360 1847 1604 1094 1767 322 178 190 330 1091 158 1103 1014 1904 753 617 1772 952 589 1609 1429 1360 1363 1303 1338 246 460 1872 1565 1923 684 1315 772 1603 82 1601 912 1003 279 1854 473 995 1334 290 302 985 521 1326 336 539 1910 1928 871 867 1008 649 587 297 285 591 682 1570 1762 383 1594 401 947 2092 1028 849 1446 1401 1029 1839 168 1898 1892 2054 19 1520 1243 883 18 1889 1702 966 8 953 ... 1530 793 1806 683 621 1048 1746 1028 313 1570 662 612 2093 1573 73 1418 1668 797 1844 484 1854 1144 1165 2031 1567 1622 1294 128 955 105 2055 514 1619 853 679 1699 752 1903 784 1280 1189 348 906 1641 62 775 1155 1610 485 2008 1682 1579 204 124 1068 1223 75 509 2046 725 1781 2109 672 1479 1950 204 848 1837 1032 2037 1248 128 600 188 669 523 298 1155 6 10 1891 1358 1993 1672 927 896 623 1382 1657 1753 368 547 677 1633 107 521 1855 504 844 530

size is 2114
items: (displaying first and last 100 elements)
858 406 1465 1227 1633 1714 339 1202 221 1227 1552 1346 360 1847 1604 1094 1767 322 178 190 330 1091 158 1103 1014 1904 753 617 1772 952 589 1609 1429 1360 1363 1303 1338 246 460 1872 1565 1923 684 1315 772 1603 82 1601 912 1003 279 1854 473 995 1334 290 302 985 521 1326 336 539 1910 1928 871 867 1008 649 587 297 285 591 682 1570 1762 383 1594 401 947 2092 1028 849 1446 1401 1029 1839 168 1898 1892 2054 19 1520 1243 883 18 1889 1702 966 8 953 ... 62 1963 1915 1087 716 1538 203 384 1623 2111 1830 1334 1250 1792 1325 534 737 987 992 1371 1642 1308 192 40 1394 1158 1909 123 1880 1408 1500 360 209 660 1307 793 709 564 1678 600 636 2067 21 1474 1992 874 595 1499 466 2005 2073 492 669 1567 1655 1190 1808 606 1216 1614 731 354 1602 16 1895 1726 587 406 1155 1488 2020 871 1703 1427 1438 1897 1297 1378 1987 739 1295 1506 450 1025 1765 186 959 1270 415 1350 1509 1905 1267 1474 446 792 447 1510 2092 387

size is 4228
--------------------------------------------------------------

Your output matches exactly!


TEST #58 (valgrind)
     test program is cda-0-11.c


==28807== All heap blocks were freed -- no leaks are possible
==28807== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #59
     test program is cda-0-12.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, random insertions and deletions
items: ((1))
items: (displaying first and last 100 elements)
848 300 1319 510 326 422 662 678 1202 179 979 1128 73 952 39 1046 876 575 346 46 1274 481 768 478 893 283 675 888 461 502 476 437 440 931 564 702 1189 1173 532 178 101 1019 904 749 453 937 803 96 385 1200 617 1250 175 1135 197 130 246 276 1303 757 34 573 963 806 268 1124 999 1209 982 1290 1062 1105 47 660 931 928 907 32 1054 1273 450 1033 332 640 478 690 401 306 878 105 167 993 389 527 771 313 1207 802 763 722 ... 779 209 257 385 155 67 1002 613 1190 1023 426 1089 270 105 543 1042 546 1076 946 504 216 261 929 56 1079 18 1275 4 1010 982 604 388 158 961 1185 53 949 1197 960 880 1249 1080 170 601 362 734 946 459 1016 116 1148 721 552 812 73 1051 611 499 545 166 154 198 609 211 755 836 398 1124 1292 210 46 280 598 442 744 412 575 608 380 135 325 1235 883 831 946 875 3 1245 820 497 504 996 226 261 90 10 278 492 583 1044

size is 607
items: (displaying first and last 100 elements)


size is 1243
--------------------------------------------------------------

Your output matches exactly!


TEST #60 (valgrind)
     test program is cda-0-12.c



YOUR RESULTS:
--------------------------------------------------------------
==28855== Memcheck, a memory error detector
==28855== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==28855== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==28855== Command: ./testdir-cda/cda-0-12
==28855== 
==28855== 
==28855== HEAP SUMMARY:
==28855==     in use at exit: 4,972 bytes in 1,243 blocks
==28855==   total heap usage: 2,676 allocs, 1,433 frees, 31,152 bytes allocated
==28855== 
==28855== LEAK SUMMARY:
==28855==    definitely lost: 4,972 bytes in 1,243 blocks
==28855==    indirectly lost: 0 bytes in 0 blocks
==28855==      possibly lost: 0 bytes in 0 blocks
==28855==    still reachable: 0 bytes in 0 blocks
==28855==         suppressed: 0 bytes in 0 blocks
==28855== Rerun with --leak-check=full to see details of leaked memory
==28855== 
==28855== For counts of detected and suppressed errors, rerun with: -v
==28855== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
--------------------------------------------------------------
There seem to be memory problems; the test FAILED


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #61
     test program is cda-0-13.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions and deletions at front
items: ((1))
items: (displaying first and last 100 elements)
1396 1446 83 1086 224 1932 73 735 174 1608 573 1888 1849 1705 134 874 881 1451 799 1756 931 927 1751 1799 558 1874 443 1700 399 839 679 1790 708 144 1013 969 1758 458 161 1760 1239 348 1240 974 824 677 1555 604 6 1866 1485 1126 1848 1357 842 338 1474 1084 1020 89 1611 21 777 1732 380 40 808 1478 699 1293 6 265 1518 563 899 1699 157 1682 1113 874 1498 128 1764 1510 1876 1237 1312 871 953 485 1306 1872 1634 222 410 382 1335 995 958 1914 ... 429 879 1051 392 724 637 1079 403 378 1251 4 431 1703 1514 331 132 1578 1282 732 1434 402 1831 1301 371 1101 556 821 1571 1158 552 939 1516 1635 414 1307 321 1739 1822 1878 1427 1542 1964 99 1056 1930 1043 880 1624 879 895 1612 1511 216 231 1543 1010 1392 1749 117 1122 911 525 209 1313 669 1478 1917 1792 1760 1394 1327 1965 34 536 1656 306 164 1979 1491 848 679 1381 1448 686 833 1274 892 1750 838 1586 912 1077 1850 725 876 871 1198 523 1944 1275

size is 920
items: (displaying first and last 100 elements)
350 1773 501 1407 347 268 521 1869 254 1278 1269 1060 1311 167 1867 446 1179 1043 1924 1623 1557 964 1706 1287 522 1477 95 652 1286 8 454 423 912 1713 372 1952 14 1236 86 673 1447 1102 1187 865 981 823 516 1036 966 445 1911 1750 442 1708 1192 1349 1671 1566 198 349 576 221 51 953 1698 615 1866 821 1269 978 1480 581 1600 364 349 1425 1337 1550 1119 1210 3 1682 43 1087 1517 1106 637 807 990 1457 298 1617 516 915 567 877 826 888 821 688 ... 429 879 1051 392 724 637 1079 403 378 1251 4 431 1703 1514 331 132 1578 1282 732 1434 402 1831 1301 371 1101 556 821 1571 1158 552 939 1516 1635 414 1307 321 1739 1822 1878 1427 1542 1964 99 1056 1930 1043 880 1624 879 895 1612 1511 216 231 1543 1010 1392 1749 117 1122 911 525 209 1313 669 1478 1917 1792 1760 1394 1327 1965 34 536 1656 306 164 1979 1491 848 679 1381 1448 686 833 1274 892 1750 838 1586 912 1077 1850 725 876 871 1198 523 1944 1275

size is 1258
--------------------------------------------------------------

Your output matches exactly!


TEST #62 (valgrind)
     test program is cda-0-13.c


==28903== All heap blocks were freed -- no leaks are possible
==28903== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #63
     test program is cda-0-14.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions and deletions at tail
items: ((1))
items: (displaying first and last 100 elements)
118 825 1672 130 896 1090 1949 142 793 1703 1878 392 1794 239 1765 275 14 157 1299 178 1050 1230 1393 1036 1985 1536 1443 1606 210 1518 1640 580 520 1489 710 1668 505 585 1811 1298 465 1614 1943 436 30 1633 711 297 2042 188 727 1018 1670 45 231 1580 1834 1674 1111 2044 1370 928 550 1890 343 1512 1484 1100 274 1472 575 739 1263 443 1175 1294 253 1887 1591 221 0 243 1491 1670 541 1722 1427 300 1574 715 521 869 1644 1323 936 164 761 345 1516 1287 ... 126 385 1674 1838 694 455 1501 1168 277 1366 1123 646 2018 1816 1353 1920 1811 1299 1477 1454 1794 562 152 266 1061 1395 874 2054 189 1297 1986 315 1682 1586 79 302 218 1832 1722 496 1376 1023 1394 1571 764 672 1416 500 1971 819 131 1942 1633 284 133 871 1679 1259 851 45 482 1014 360 89 525 691 643 744 701 291 1492 2 1314 811 1825 255 1736 1418 1008 1884 162 1139 1752 2048 1675 62 844 1531 1322 1947 1576 1804 887 114 70 1412 805 714 333 1506

size is 898
items: (displaying first and last 100 elements)
118 825 1672 130 896 1090 1949 142 793 1703 1878 392 1794 239 1765 275 14 157 1299 178 1050 1230 1393 1036 1985 1536 1443 1606 210 1518 1640 580 520 1489 710 1668 505 585 1811 1298 465 1614 1943 436 30 1633 711 297 2042 188 727 1018 1670 45 231 1580 1834 1674 1111 2044 1370 928 550 1890 343 1512 1484 1100 274 1472 575 739 1263 443 1175 1294 253 1887 1591 221 0 243 1491 1670 541 1722 1427 300 1574 715 521 869 1644 1323 936 164 761 345 1516 1287 ... 1975 1865 2021 1051 1784 1090 17 562 1140 800 918 1097 1709 342 1406 869 1904 1106 1512 760 9 1333 141 1890 1739 455 469 22 561 1654 936 462 1696 1134 1513 1405 149 1783 145 1289 760 1315 564 394 1657 1970 1264 1487 1254 953 424 1263 211 566 1330 128 1273 1799 402 1835 1630 1590 474 1251 649 164 834 798 1947 979 265 632 219 1081 1027 1876 1228 468 1540 407 1421 1965 1923 1884 708 1178 189 1981 1155 591 1993 710 106 644 139 1007 809 973 1806 681

size is 1881
--------------------------------------------------------------

Your output matches exactly!


TEST #64 (valgrind)
     test program is cda-0-14.c


==28951== All heap blocks were freed -- no leaks are possible
==28951== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #65
     test program is cda-0-15.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (displaying first and last 100 elements)
1371 1284 1398 1397 1381 1379 1378 1388 1354 1396 1357 1395 1386 1394 1377 1370 1382 1341 1374 1373 1368 1376 1356 1366 1359 1367 1369 1347 1352 1350 1365 1355 1340 1270 1315 1342 1334 1325 1311 1330 1297 1312 1324 1321 1323 1318 1289 1317 1282 1306 1247 1268 1278 1304 1272 1300 1292 1285 1251 1274 1277 1264 1273 1257 1269 1263 1271 1259 1262 1233 1248 1266 1220 1250 1260 1253 1237 1249 1254 1178 1240 1234 1239 1241 1228 1200 1231 1217 1227 1221 1183 1213 1208 1218 1148 1187 1181 1206 1214 1198 ... 1211 1209 1167 1222 1215 1223 1225 1232 1229 1243 1194 1238 1226 1245 1252 1235 1230 1236 1261 1258 1256 1267 1265 1244 1279 1255 1219 1275 1288 1290 1287 1246 1286 1294 1295 1298 1281 1276 1242 1203 1296 1305 1280 1308 1309 1303 1299 1310 1314 1293 1283 1307 1301 1326 1327 1291 1320 1329 1319 1335 1333 1322 1332 1302 1338 1336 1346 1345 1348 1313 1353 1349 1358 1337 1339 1363 1351 1328 1361 1362 1372 1383 1331 1375 1343 1360 1380 1392 1316 1399 1344 1391 1387 1390 1364 1389 1385 1384 1400 1393

size is 1401
items: (1,(0))
size is 1
items: (displaying first and last 100 elements)
1392 1372 1396 1398 1386 1371 1393 1378 1399 1352 1391 1376 1395 1384 1390 1364 1388 1373 1375 1370 1383 1367 1360 1257 1353 1308 1368 1365 1326 1354 1345 1362 1344 1323 1329 1351 1324 1335 1337 1341 1342 1333 1334 1319 1332 1315 1302 1330 1328 1284 1314 1316 1288 1297 1309 1301 1296 1312 1294 1306 1272 1293 1268 1298 1295 1267 1273 1289 1246 1222 1264 1281 1283 1239 1262 1271 1270 1209 1259 1254 1240 1249 1219 1253 1228 1241 1173 1238 1234 1217 1236 1221 1232 1192 1216 1211 1225 1187 1210 1174 ... 1204 1195 1182 1206 1218 1197 1165 1226 1213 1214 1233 1242 1229 1223 1224 1235 1230 1245 1250 1252 1251 1220 1243 1248 1255 1263 1265 1227 1237 1260 1274 1247 1266 1256 1258 1279 1282 1278 1280 1244 1261 1276 1269 1277 1287 1303 1304 1291 1299 1300 1231 1305 1311 1318 1285 1321 1320 1325 1307 1292 1275 1310 1338 1336 1340 1331 1343 1348 1286 1290 1349 1313 1322 1350 1357 1339 1346 1355 1358 1317 1363 1374 1347 1327 1359 1369 1380 1385 1381 1389 1400 1377 1361 1387 1397 1356 1379 1382 1394 1366

size is 1402
items: (1,11,(2))
size is 2
--------------------------------------------------------------
timeout: the monitored command dumped core
./module-tester: line 35: 28991 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (displaying first and last 100 elements)
1371 1284 1398 1397 1381 1379 1378 1388 1354 1396 1357 1395 1386 1394 1377 1370 1382 1341 1374 1373 1368 1376 1356 1366 1359 1367 1369 1347 1352 1350 1365 1355 1340 1270 1315 1342 1334 1325 1311 1330 1297 1312 1324 1321 1323 1318 1289 1317 1282 1306 1247 1268 1278 1304 1272 1300 1292 1285 1251 1274 1277 1264 1273 1257 1269 1263 1271 1259 1262 1233 1248 1266 1220 1250 1260 1253 1237 1249 1254 1178 1240 1234 1239 1241 1228 1200 1231 1217 1227 1221 1183 1213 1208 1218 1148 1187 1181 1206 1214 1198 ... 1211 1209 1167 1222 1215 1223 1225 1232 1229 1243 1194 1238 1226 1245 1252 1235 1230 1236 1261 1258 1256 1267 1265 1244 1279 1255 1219 1275 1288 1290 1287 1246 1286 1294 1295 1298 1281 1276 1242 1203 1296 1305 1280 1308 1309 1303 1299 1310 1314 1293 1283 1307 1301 1326 1327 1291 1320 1329 1319 1335 1333 1322 1332 1302 1338 1336 1346 1345 1348 1313 1353 1349 1358 1337 1339 1363 1351 1328 1361 1362 1372 1383 1331 1375 1343 1360 1380 1392 1316 1399 1344 1391 1387 1390 1364 1389 1385 1384 1400 1393

size is 1401
items: (140130120,(3))
size is 1
items: (displaying first and last 100 elements)
1392 1372 1396 1398 1386 1371 1393 1378 1399 1352 1391 1376 1395 1384 1390 1364 1388 1373 1375 1370 1383 1367 1360 1257 1353 1308 1368 1365 1326 1354 1345 1362 1344 1323 1329 1351 1324 1335 1337 1341 1342 1333 1334 1319 1332 1315 1302 1330 1328 1284 1314 1316 1288 1297 1309 1301 1296 1312 1294 1306 1272 1293 1268 1298 1295 1267 1273 1289 1246 1222 1264 1281 1283 1239 1262 1271 1270 1209 1259 1254 1240 1249 1219 1253 1228 1241 1173 1238 1234 1217 1236 1221 1232 1192 1216 1211 1225 1187 1210 1174 ... 1204 1195 1182 1206 1218 1197 1165 1226 1213 1214 1233 1242 1229 1223 1224 1235 1230 1245 1250 1252 1251 1220 1243 1248 1255 1263 1265 1227 1237 1260 1274 1247 1266 1256 1258 1279 1282 1278 1280 1244 1261 1276 1269 1277 1287 1303 1304 1291 1299 1300 1231 1305 1311 1318 1285 1321 1320 1325 1307 1292 1275 1310 1338 1336 1340 1331 1343 1348 1286 1290 1349 1313 1322 1350 1357 1339 1346 1355 1358 1317 1363 1374 1347 1327 1359 1369 1380 1385 1381 1389 1400 1377 1361 1387 1397 1356 1379 1382 1394 1366

size is 1402
*** Error in `./testdir-cda/cda-0-15': double free or corruption (out): 0xb77967c0 ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x67377)[0xb764b377]
/lib/i386-linux-gnu/libc.so.6(+0x6d2f7)[0xb76512f7]
/lib/i386-linux-gnu/libc.so.6(+0x6dc31)[0xb7651c31]
./testdir-cda/cda-0-15[0x8048aef]
./testdir-cda/cda-0-15[0x8048956]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf7)[0xb75fc637]
./testdir-cda/cda-0-15[0x8048561]
======= Memory map: ========
08048000-0804b000 r-xp 00000000 fc:00 675042     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-15
0804b000-0804c000 r--p 00002000 fc:00 675042     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-15
0804c000-0804d000 rw-p 00003000 fc:00 675042     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-15
085a3000-085c4000 rw-p 00000000 00:00 0          [heap]
b7400000-b7421000 rw-p 00000000 00:00 0 
b7421000-b7500000 ---p 00000000 00:00 0 
b75bb000-b75d7000 r-xp 00000000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b75d7000-b75d8000 rw-p 0001b000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b75e3000-b75e4000 rw-p 00000000 00:00 0 
b75e4000-b7794000 r-xp 00000000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b7794000-b7796000 r--p 001af000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b7796000-b7797000 rw-p 001b1000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b7797000-b779a000 rw-p 00000000 00:00 0 
b77a4000-b77a6000 rw-p 00000000 00:00 0 
b77a6000-b77a9000 r--p 00000000 00:00 0          [vvar]
b77a9000-b77aa000 r-xp 00000000 00:00 0          [vdso]
b77aa000-b77cd000 r-xp 00000000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b77cd000-b77ce000 r--p 00022000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b77ce000-b77cf000 rw-p 00023000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
bfa6a000-bfa8b000 rw-p 00000000 00:00 0          [stack]
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #66
     test program is cda-0-16.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, unions
test size is 1447
p items: ((1))
p items: ((1))
p items: (displaying first and last 100 elements)
607 586 1365 448 838 248 1038 911 457 379 299 295 1403 1162 248 652 206 174 851 952 1079 875 783 803 473 302 611 1084 1333 727 963 1237 135 520 674 1369 849 49 696 1037 614 1196 1293 486 799 1059 271 434 1302 1110 1446 923 1433 179 229 638 1357 320 217 499 526 1143 70 805 888 1069 461 1072 398 245 711 516 334 946 671 715 1322 272 1223 1168 593 994 1372 259 806 1035 809 257 679 608 1343 980 130 1255 134 1391 1147 393 761 1166 ... 1309 705 254 73 1094 1020 909 1265 398 672 692 350 617 1081 750 358 161 759 778 267 148 1204 565 377 387 359 458 1335 734 13 1183 1258 349 93 699 1230 1024 1041 681 1413 1332 658 48 596 741 128 224 885 367 197 362 1303 224 1304 1116 441 1057 962 941 847 48 184 1122 448 1194 567 307 494 284 445 1321 1013 613 75 660 102 910 1383 28 392 1389 1232 819 1360 992 1050 1115 98 484 524 101 293 627 630 845 1412 1442 531 1399 982

q items: ((1))
p size is 2894
q size is 0
p items: (displaying first and last 100 elements)
1080 545 607 1312 586 1365 477 448 838 941 248 1038 1157 1226 911 457 862 379 299 1336 295 1403 1162 1202 248 652 206 1020 174 851 952 1079 875 783 803 473 302 611 1084 1333 727 963 1237 135 520 267 367 549 674 907 526 306 1369 849 1296 256 49 696 1037 614 1249 1195 887 1196 1293 486 799 273 1125 1080 1345 1059 271 434 610 201 1302 1110 1446 259 923 1433 179 229 638 1357 92 320 217 499 574 559 820 331 469 282 526 1143 70 261 ... 1053 1217 802 1233 413 1204 867 151 1063 1132 145 224 912 313 1016 1094 1090 860 548 756 489 16 1137 1216 992 755 1225 677 637 1433 116 332 176 115 612 1178 383 278 113 706 889 1080 171 294 31 1333 660 1374 676 1123 464 808 570 873 1317 8 87 749 1340 226 187 480 853 1364 361 1284 25 464 263 683 194 466 1019 341 946 326 1344 147 154 224 531 478 1096 1022 58 1029 129 1064 1212 423 506 20 166 1067 507 1351 861 1443 1006 443

q items: ((1))
p size is 5788
q size is 0
--------------------------------------------------------------
timeout: the monitored command dumped core
./module-tester: line 35: 29040 Segmentation fault      timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, unions
test size is 1447
p items: ((1))
p items: ((1))
p items: (displaying first and last 100 elements)
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #67
     test program is cda-0-17.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions at the tail
items: ((1))
items: (displaying first and last 100 elements)
65690 89661 15042 130061 151796 157068 179642 67592 169066 177433 166568 61759 66976 13821 25742 179216 152389 53750 50718 139125 171485 102433 188307 36204 284 94262 51067 39930 147981 92011 76806 111262 42271 88838 4885 141609 180216 29663 70128 155758 161764 83371 98254 176981 177052 39866 6233 175265 162248 177646 184278 35715 29313 162879 13504 15960 34672 80312 68738 189115 182345 1815 72322 119341 133396 57763 82258 112031 4963 93270 59562 39842 90819 73266 33507 97560 183574 96642 158713 146527 15138 39646 143875 91225 82647 13412 139832 82549 55666 82421 74256 187283 7720 169788 2075 114603 176666 150761 188184 125440 ... 51833 69002 86601 131364 165869 15000 51485 115500 137741 98071 47307 148905 18863 175412 125875 147292 162896 24236 57889 120897 42703 172073 53148 96115 29394 51110 184127 63399 178579 5742 181000 174375 61540 59407 10271 35400 8413 183316 187258 134708 165830 175612 78046 55114 133884 63246 96148 160946 92292 159376 92870 37797 58309 45103 2710 154431 21690 20665 35070 12423 172788 176050 159397 118837 23363 10313 165201 99775 115329 125137 16901 168839 75626 138329 111389 8014 108679 91432 177120 175826 180694 45081 80356 35419 171992 159831 132336 37440 174234 10871 54885 71967 49056 51549 29728 155025 69574 58483 1023 1676

size is 190046
items: (displaying first and last 100 elements)
65690 89661 15042 130061 151796 157068 179642 67592 169066 177433 166568 61759 66976 13821 25742 179216 152389 53750 50718 139125 171485 102433 188307 36204 284 94262 51067 39930 147981 92011 76806 111262 42271 88838 4885 141609 180216 29663 70128 155758 161764 83371 98254 176981 177052 39866 6233 175265 162248 177646 184278 35715 29313 162879 13504 15960 34672 80312 68738 189115 182345 1815 72322 119341 133396 57763 82258 112031 4963 93270 59562 39842 90819 73266 33507 97560 183574 96642 158713 146527 15138 39646 143875 91225 82647 13412 139832 82549 55666 82421 74256 187283 7720 169788 2075 114603 176666 150761 188184 125440 ... 4957 74358 13284 67938 9712 125440 148423 181648 110716 62084 2266 98230 42802 70840 23344 23352 12778 64870 172291 85777 142061 182414 162232 74115 79608 133596 102038 32229 28030 175287 187388 151979 142456 144639 5717 188962 133845 130475 11406 71193 33002 55148 128828 125987 36552 54338 155973 116320 151531 151494 147436 151134 177846 43373 178412 162526 11568 156409 187309 143361 121988 103862 132381 78557 137202 97222 36522 68085 32131 95834 108283 41867 14352 106354 18991 81582 175778 75001 133991 94239 39671 21845 132029 136668 47496 184658 29180 121737 117014 91299 16124 123090 86691 2228 7711 147936 134034 159727 141970 50132

size is 380092
--------------------------------------------------------------

Your output matches exactly!


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #68
     test program is cda-0-18.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions and deletions at front
items: ((1))
items: (displaying first and last 100 elements)
13774 2066 18791 70394 83500 58957 101581 145567 31574 20552 107832 147639 7502 149742 92220 154707 94463 74134 121911 141653 73255 130788 70949 88709 122201 67646 28237 123237 133003 3636 14160 48213 84029 125297 73647 42767 132217 81028 37735 154231 13050 123552 55419 18258 55279 122919 137630 57644 879 156586 70704 89380 113420 108137 60471 164427 100105 129435 48448 24161 85070 159159 140029 41262 158543 158082 5032 143448 7349 19016 98812 99626 68273 37334 150924 163097 122040 146507 91774 16332 147999 128030 28909 114456 8031 35870 115979 75944 149199 159585 154429 43808 616 147410 36230 119929 90103 90849 149470 12557 ... 159699 107714 33806 80206 94136 108835 43275 151523 64440 152601 74933 7667 50627 137928 110610 156581 154171 2788 106492 1181 56600 110632 113001 56257 97260 153146 27977 51250 130796 86871 57472 79492 13578 90434 36931 108076 149228 160971 15960 56773 41344 102468 1891 59509 88590 47192 154923 152990 111651 100694 158476 343 13372 125318 133114 150843 22350 106569 159241 156138 73293 71871 147395 10335 46040 146256 92116 92455 119627 18326 159715 147298 13878 59533 9420 101063 101004 159063 99348 111308 87321 33158 137526 132826 42339 131378 96436 136509 33276 26741 8742 2328 25831 1139 83682 119047 26629 73790 37574 137791

size is 65107
items: (displaying first and last 100 elements)
95707 3421 3607 151373 76633 17537 7246 147132 133471 49124 107248 114706 125137 132860 73577 163552 8414 41334 67953 154437 82015 77837 164429 77248 150584 21184 28224 57412 163411 107893 151056 49168 92251 90904 144127 34334 49529 62955 39884 123599 28821 79222 41129 127048 124445 32243 34970 124274 64153 155578 155471 4767 32087 82615 153857 32543 23236 85794 71819 53614 120475 164986 70503 57917 41375 81172 99284 30764 138968 65496 82469 67236 120239 113720 31449 105005 72924 44854 134265 164220 62862 12227 16372 165007 59379 7434 126187 74455 130782 11667 148574 62558 123611 154794 63467 115445 47038 138621 53128 71731 ... 159699 107714 33806 80206 94136 108835 43275 151523 64440 152601 74933 7667 50627 137928 110610 156581 154171 2788 106492 1181 56600 110632 113001 56257 97260 153146 27977 51250 130796 86871 57472 79492 13578 90434 36931 108076 149228 160971 15960 56773 41344 102468 1891 59509 88590 47192 154923 152990 111651 100694 158476 343 13372 125318 133114 150843 22350 106569 159241 156138 73293 71871 147395 10335 46040 146256 92116 92455 119627 18326 159715 147298 13878 59533 9420 101063 101004 159063 99348 111308 87321 33158 137526 132826 42339 131378 96436 136509 33276 26741 8742 2328 25831 1139 83682 119047 26629 73790 37574 137791

size is 109748
--------------------------------------------------------------

Your output matches exactly!


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #69
     test program is cda-0-19.c (alloted time: 5s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, insertions and deletions at tail
items: ((1))
items: (displaying first and last 100 elements)
43807 101070 5873 139035 76868 60949 51562 178661 112840 184801 169922 24568 67751 180393 16580 10545 114421 187547 189827 114323 184785 178708 133277 17735 156817 74417 12760 70999 50599 110188 51105 94406 127299 56978 39317 120207 33967 6920 104744 146808 107761 80542 171376 175512 176975 103996 186057 97273 97419 97801 17472 4120 82385 66789 132019 45078 57246 144779 116078 107845 60844 167183 8128 104183 140201 157609 30266 174169 80569 135010 42893 188330 131593 130309 85759 30484 40181 77692 127757 53640 175493 61269 167924 63754 44098 105819 24873 101344 56475 140951 125230 33359 30050 49398 137542 170251 12883 83848 66336 9493 ... 86429 177122 6140 95172 45652 185519 90221 18596 8085 9793 99369 130457 32740 150961 153758 82117 122929 58371 149624 126695 121340 119534 153188 143772 76887 133734 140650 6062 58602 193822 93010 145031 176820 99150 156243 138512 6586 52340 157108 14671 172298 62353 61168 10914 129355 130967 9072 58160 189338 158696 184855 116554 84106 59959 66202 77034 193693 122892 193260 58171 122590 92146 119242 21326 107337 81361 159838 113923 49742 38862 44634 138080 101216 105803 148994 146611 42646 74106 120811 148024 38678 27582 70454 38825 87541 52696 31899 87110 175588 31035 61322 104055 39221 180564 125381 62598 177966 7136 176521 143748

size is 32841
items: (displaying first and last 100 elements)
43807 101070 5873 139035 76868 60949 51562 178661 112840 184801 169922 24568 67751 180393 16580 10545 114421 187547 189827 114323 184785 178708 133277 17735 156817 74417 12760 70999 50599 110188 51105 94406 127299 56978 39317 120207 33967 6920 104744 146808 107761 80542 171376 175512 176975 103996 186057 97273 97419 97801 17472 4120 82385 66789 132019 45078 57246 144779 116078 107845 60844 167183 8128 104183 140201 157609 30266 174169 80569 135010 42893 188330 131593 130309 85759 30484 40181 77692 127757 53640 175493 61269 167924 63754 44098 105819 24873 101344 56475 140951 125230 33359 30050 49398 137542 170251 12883 83848 66336 9493 ... 146834 165686 114790 126143 1402 81370 104871 124676 25661 52865 119378 81657 18043 98412 144414 41591 81266 62288 124711 108762 39871 11129 104442 52352 165728 40859 79661 63580 177573 39081 114055 130283 10643 144885 172466 122209 32131 193378 52761 57793 162283 88179 55490 180326 186591 5780 27794 183897 68068 68545 14575 23980 189838 119017 76332 77483 75917 72033 141063 169530 111115 171158 21729 121758 121920 72 49844 70091 193450 18645 43924 77649 22865 99414 63852 125496 105194 7686 115270 173263 186395 129845 3119 182109 164903 189615 65468 46696 67524 122571 22102 178639 15646 43831 22314 137566 154067 182322 13533 69433

size is 98501
--------------------------------------------------------------

Your output matches exactly!


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #70
     test program is cda-0-20.c (alloted time: 5s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (displaying first and last 100 elements)
1898817 1898857 1898840 1898818 1898830 1898862 1898831 1898848 1898856 1898858 1898861 1898846 1898837 1898833 1898851 1898844 1898847 1898841 1898814 1898839 1898834 1898813 1898805 1898828 1898799 1898808 1898815 1898823 1898824 1898816 1898820 1898791 1898811 1898786 1898801 1898800 1898784 1898806 1898780 1898771 1898802 1898794 1898788 1898777 1898766 1898793 1898772 1898787 1898790 1898744 1898762 1898783 1898781 1898765 1898775 1898763 1898773 1898768 1898764 1898770 1898742 1898754 1898750 1898759 1898749 1898751 1898708 1898753 1898746 1898756 1898720 1898719 1898741 1898737 1898728 1898724 1898736 1898712 1898717 1898740 1898663 1898690 1898732 1898725 1898716 1898673 1898697 1898718 1898707 1898713 1898699 1898695 1898683 1898686 1898696 1898700 1898684 1898694 1898685 1898648 ... 1898657 1898662 1898666 1898669 1898644 1898675 1898677 1898635 1898608 1898640 1898670 1898687 1898681 1898660 1898691 1898692 1898693 1898698 1898668 1898702 1898703 1898678 1898689 1898621 1898705 1898710 1898714 1898722 1898706 1898723 1898711 1898709 1898721 1898729 1898730 1898733 1898735 1898726 1898701 1898738 1898704 1898739 1898727 1898745 1898734 1898715 1898743 1898757 1898747 1898758 1898761 1898774 1898755 1898769 1898767 1898776 1898778 1898637 1898748 1898782 1898779 1898795 1898752 1898797 1898667 1898785 1898809 1898803 1898810 1898819 1898804 1898807 1898821 1898812 1898760 1898826 1898792 1898731 1898798 1898836 1898838 1898829 1898825 1898835 1898822 1898843 1898832 1898845 1898854 1898859 1898849 1898850 1898852 1898853 1898789 1898855 1898842 1898796 1898860 1898827

size is 1898863
items: (1,(0))
size is 1
items: (displaying first and last 100 elements)
1898857 1898843 1898848 1898842 1898854 1898858 1898861 1898859 1898834 1898838 1898860 1898786 1898853 1898850 1898822 1898823 1898830 1898845 1898846 1898839 1898819 1898837 1898813 1898829 1898718 1898810 1898783 1898790 1898826 1898825 1898807 1898797 1898821 1898817 1898818 1898814 1898788 1898793 1898795 1898800 1898778 1898785 1898762 1898711 1898752 1898764 1898742 1898727 1898780 1898763 1898690 1898730 1898760 1898756 1898754 1898759 1898737 1898726 1898734 1898728 1898683 1898704 1898732 1898731 1898729 1898714 1898725 1898675 1898719 1898721 1898708 1898710 1898717 1898691 1898716 1898713 1898688 1898671 1898695 1898705 1898674 1898693 1898628 1898681 1898664 1898679 1898676 1898682 1898680 1898647 1898646 1898667 1898670 1898663 1898665 1898672 1898617 1898644 1898610 1898659 ... 1898687 1898692 1898697 1898684 1898694 1898689 1898650 1898703 1898701 1898706 1898700 1898709 1898715 1898712 1898720 1898733 1898702 1898699 1898707 1898735 1898740 1898739 1898738 1898745 1898736 1898747 1898698 1898744 1898750 1898724 1898643 1898743 1898723 1898741 1898753 1898722 1898751 1898748 1898755 1898746 1898765 1898749 1898769 1898768 1898773 1898774 1898766 1898776 1898757 1898772 1898782 1898771 1898779 1898761 1898777 1898775 1898758 1898792 1898770 1898787 1898781 1898789 1898784 1898803 1898796 1898804 1898791 1898798 1898809 1898767 1898794 1898802 1898805 1898812 1898815 1898808 1898811 1898799 1898833 1898832 1898827 1898835 1898836 1898806 1898828 1898824 1898849 1898801 1898841 1898840 1898851 1898852 1898844 1898855 1898847 1898862 1898820 1898831 1898816 1898856

size is 1898864
items: (1,2276,(2))
size is 2
--------------------------------------------------------------
timeout: the monitored command dumped core
./module-tester: line 35: 29209 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (displaying first and last 100 elements)
1898817 1898857 1898840 1898818 1898830 1898862 1898831 1898848 1898856 1898858 1898861 1898846 1898837 1898833 1898851 1898844 1898847 1898841 1898814 1898839 1898834 1898813 1898805 1898828 1898799 1898808 1898815 1898823 1898824 1898816 1898820 1898791 1898811 1898786 1898801 1898800 1898784 1898806 1898780 1898771 1898802 1898794 1898788 1898777 1898766 1898793 1898772 1898787 1898790 1898744 1898762 1898783 1898781 1898765 1898775 1898763 1898773 1898768 1898764 1898770 1898742 1898754 1898750 1898759 1898749 1898751 1898708 1898753 1898746 1898756 1898720 1898719 1898741 1898737 1898728 1898724 1898736 1898712 1898717 1898740 1898663 1898690 1898732 1898725 1898716 1898673 1898697 1898718 1898707 1898713 1898699 1898695 1898683 1898686 1898696 1898700 1898684 1898694 1898685 1898648 ... 1898657 1898662 1898666 1898669 1898644 1898675 1898677 1898635 1898608 1898640 1898670 1898687 1898681 1898660 1898691 1898692 1898693 1898698 1898668 1898702 1898703 1898678 1898689 1898621 1898705 1898710 1898714 1898722 1898706 1898723 1898711 1898709 1898721 1898729 1898730 1898733 1898735 1898726 1898701 1898738 1898704 1898739 1898727 1898745 1898734 1898715 1898743 1898757 1898747 1898758 1898761 1898774 1898755 1898769 1898767 1898776 1898778 1898637 1898748 1898782 1898779 1898795 1898752 1898797 1898667 1898785 1898809 1898803 1898810 1898819 1898804 1898807 1898821 1898812 1898760 1898826 1898792 1898731 1898798 1898836 1898838 1898829 1898825 1898835 1898822 1898843 1898832 1898845 1898854 1898859 1898849 1898850 1898852 1898853 1898789 1898855 1898842 1898796 1898860 1898827

size is 1898863
items: (-1216694336,(3))
size is 1
items: (displaying first and last 100 elements)
1898857 1898843 1898848 1898842 1898854 1898858 1898861 1898859 1898834 1898838 1898860 1898786 1898853 1898850 1898822 1898823 1898830 1898845 1898846 1898839 1898819 1898837 1898813 1898829 1898718 1898810 1898783 1898790 1898826 1898825 1898807 1898797 1898821 1898817 1898818 1898814 1898788 1898793 1898795 1898800 1898778 1898785 1898762 1898711 1898752 1898764 1898742 1898727 1898780 1898763 1898690 1898730 1898760 1898756 1898754 1898759 1898737 1898726 1898734 1898728 1898683 1898704 1898732 1898731 1898729 1898714 1898725 1898675 1898719 1898721 1898708 1898710 1898717 1898691 1898716 1898713 1898688 1898671 1898695 1898705 1898674 1898693 1898628 1898681 1898664 1898679 1898676 1898682 1898680 1898647 1898646 1898667 1898670 1898663 1898665 1898672 1898617 1898644 1898610 1898659 ... 1898687 1898692 1898697 1898684 1898694 1898689 1898650 1898703 1898701 1898706 1898700 1898709 1898715 1898712 1898720 1898733 1898702 1898699 1898707 1898735 1898740 1898739 1898738 1898745 1898736 1898747 1898698 1898744 1898750 1898724 1898643 1898743 1898723 1898741 1898753 1898722 1898751 1898748 1898755 1898746 1898765 1898749 1898769 1898768 1898773 1898774 1898766 1898776 1898757 1898772 1898782 1898771 1898779 1898761 1898777 1898775 1898758 1898792 1898770 1898787 1898781 1898789 1898784 1898803 1898796 1898804 1898791 1898798 1898809 1898767 1898794 1898802 1898805 1898812 1898815 1898808 1898811 1898799 1898833 1898832 1898827 1898835 1898836 1898806 1898828 1898824 1898849 1898801 1898841 1898840 1898851 1898852 1898844 1898855 1898847 1898862 1898820 1898831 1898816 1898856

size is 1898864
*** Error in `./testdir-cda/cda-0-20': double free or corruption (out): 0xb77ab7c8 ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x67377)[0xb7660377]
/lib/i386-linux-gnu/libc.so.6(+0x6d2f7)[0xb76662f7]
/lib/i386-linux-gnu/libc.so.6(+0x6dc31)[0xb7666c31]
./testdir-cda/cda-0-20[0x8048aef]
./testdir-cda/cda-0-20[0x8048956]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf7)[0xb7611637]
./testdir-cda/cda-0-20[0x8048561]
======= Memory map: ========
08048000-0804b000 r-xp 00000000 fc:00 675053     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-20
0804b000-0804c000 r--p 00002000 fc:00 675053     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-20
0804c000-0804d000 rw-p 00003000 fc:00 675053     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-20
083e0000-08471000 rw-p 00000000 00:00 0          [heap]
b7400000-b7421000 rw-p 00000000 00:00 0 
b7421000-b7500000 ---p 00000000 00:00 0 
b75d0000-b75ec000 r-xp 00000000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b75ec000-b75ed000 rw-p 0001b000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b75f8000-b75f9000 rw-p 00000000 00:00 0 
b75f9000-b77a9000 r-xp 00000000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b77a9000-b77ab000 r--p 001af000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b77ab000-b77ac000 rw-p 001b1000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b77ac000-b77af000 rw-p 00000000 00:00 0 
b77b9000-b77bb000 rw-p 00000000 00:00 0 
b77bb000-b77be000 r--p 00000000 00:00 0          [vvar]
b77be000-b77bf000 r-xp 00000000 00:00 0          [vdso]
b77bf000-b77e2000 r-xp 00000000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b77e2000-b77e3000 r--p 00022000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b77e3000-b77e4000 rw-p 00023000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
bf91a000-bf93b000 rw-p 00000000 00:00 0          [stack]
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o


TEST #71
     test program is cda-0-21.c (alloted time: 5s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (displaying first and last 100 elements)
1603493 1603515 1603478 1603457 1603504 1603512 1603507 1603492 1603517 1603510 1603499 1603505 1603488 1603496 1603477 1603503 1603487 1603500 1603483 1603497 1603486 1603491 1603490 1603485 1603452 1603481 1603464 1603462 1603480 1603484 1603476 1603482 1603374 1603407 1603472 1603475 1603473 1603463 1603418 1603451 1603469 1603423 1603447 1603426 1603448 1603436 1603435 1603442 1603411 1603443 1603437 1603433 1603429 1603420 1603421 1603424 1603377 1603408 1603415 1603412 1603392 1603416 1603413 1603405 1603365 1603409 1603410 1603390 1603406 1603400 1603403 1603361 1603387 1603404 1603385 1603401 1603376 1603398 1603393 1603386 1603358 1603379 1603359 1603345 1603372 1603353 1603373 1603371 1603337 1603313 1603368 1603363 1603357 1603356 1603355 1603350 1603330 1603311 1603349 1603339 ... 1603317 1603289 1603318 1603253 1603312 1603325 1603305 1603323 1603324 1603327 1603321 1603335 1603307 1603320 1603285 1603326 1603328 1603340 1603344 1603360 1603332 1603347 1603366 1603367 1603282 1603351 1603346 1603362 1603369 1603364 1603310 1603375 1603381 1603384 1603348 1603388 1603383 1603391 1603380 1603382 1603354 1603396 1603414 1603395 1603402 1603422 1603399 1603417 1603378 1603430 1603389 1603352 1603434 1603438 1603397 1603431 1603427 1603394 1603428 1603441 1603446 1603419 1603453 1603370 1603450 1603455 1603454 1603444 1603458 1603440 1603461 1603425 1603465 1603466 1603460 1603470 1603468 1603471 1603474 1603467 1603479 1603494 1603495 1603489 1603498 1603501 1603509 1603456 1603459 1603445 1603511 1603449 1603502 1603432 1603516 1603508 1603439 1603513 1603514 1603506

size is 1603518
items: (1,(0))
size is 1
items: (displaying first and last 100 elements)
1603485 1603509 1603512 1603507 1603516 1603511 1603495 1603448 1603510 1603499 1603514 1603472 1603476 1603480 1603481 1603501 1603506 1603471 1603490 1603466 1603494 1603484 1603479 1603425 1603482 1603478 1603459 1603362 1603475 1603455 1603467 1603461 1603409 1603457 1603462 1603463 1603449 1603443 1603454 1603390 1603453 1603452 1603429 1603432 1603451 1603447 1603413 1603438 1603444 1603433 1603437 1603411 1603418 1603428 1603431 1603427 1603423 1603378 1603317 1603404 1603393 1603415 1603359 1603398 1603356 1603407 1603406 1603388 1603399 1603377 1603385 1603368 1603383 1603372 1603367 1603373 1603364 1603339 1603348 1603338 1603358 1603363 1603349 1603361 1603344 1603357 1603327 1603334 1603321 1603345 1603333 1603342 1603335 1603328 1603295 1603297 1603332 1603300 1603329 1603286 ... 1603343 1603336 1603347 1603340 1603346 1603315 1603352 1603341 1603351 1603330 1603325 1603353 1603331 1603360 1603371 1603369 1603354 1603370 1603319 1603350 1603380 1603379 1603374 1603384 1603366 1603365 1603355 1603381 1603386 1603318 1603387 1603375 1603391 1603392 1603397 1603395 1603394 1603389 1603400 1603402 1603396 1603410 1603414 1603376 1603419 1603382 1603412 1603408 1603421 1603401 1603422 1603434 1603430 1603426 1603436 1603439 1603405 1603403 1603445 1603441 1603440 1603442 1603446 1603417 1603458 1603456 1603416 1603450 1603420 1603469 1603473 1603474 1603477 1603435 1603483 1603460 1603487 1603424 1603465 1603464 1603497 1603498 1603496 1603502 1603503 1603492 1603489 1603508 1603486 1603493 1603488 1603491 1603513 1603505 1603517 1603470 1603504 1603468 1603500 1603515

size is 1603519
items: (1,559,(2))
size is 2
--------------------------------------------------------------
timeout: the monitored command dumped core
./module-tester: line 35: 29258 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of CDA, delete all
items: ((1))
items: (displaying first and last 100 elements)
1603493 1603515 1603478 1603457 1603504 1603512 1603507 1603492 1603517 1603510 1603499 1603505 1603488 1603496 1603477 1603503 1603487 1603500 1603483 1603497 1603486 1603491 1603490 1603485 1603452 1603481 1603464 1603462 1603480 1603484 1603476 1603482 1603374 1603407 1603472 1603475 1603473 1603463 1603418 1603451 1603469 1603423 1603447 1603426 1603448 1603436 1603435 1603442 1603411 1603443 1603437 1603433 1603429 1603420 1603421 1603424 1603377 1603408 1603415 1603412 1603392 1603416 1603413 1603405 1603365 1603409 1603410 1603390 1603406 1603400 1603403 1603361 1603387 1603404 1603385 1603401 1603376 1603398 1603393 1603386 1603358 1603379 1603359 1603345 1603372 1603353 1603373 1603371 1603337 1603313 1603368 1603363 1603357 1603356 1603355 1603350 1603330 1603311 1603349 1603339 ... 1603317 1603289 1603318 1603253 1603312 1603325 1603305 1603323 1603324 1603327 1603321 1603335 1603307 1603320 1603285 1603326 1603328 1603340 1603344 1603360 1603332 1603347 1603366 1603367 1603282 1603351 1603346 1603362 1603369 1603364 1603310 1603375 1603381 1603384 1603348 1603388 1603383 1603391 1603380 1603382 1603354 1603396 1603414 1603395 1603402 1603422 1603399 1603417 1603378 1603430 1603389 1603352 1603434 1603438 1603397 1603431 1603427 1603394 1603428 1603441 1603446 1603419 1603453 1603370 1603450 1603455 1603454 1603444 1603458 1603440 1603461 1603425 1603465 1603466 1603460 1603470 1603468 1603471 1603474 1603467 1603479 1603494 1603495 1603489 1603498 1603501 1603509 1603456 1603459 1603445 1603511 1603449 1603502 1603432 1603516 1603508 1603439 1603513 1603514 1603506

size is 1603518
items: (0,(3))
size is 1
items: (displaying first and last 100 elements)
1603485 1603509 1603512 1603507 1603516 1603511 1603495 1603448 1603510 1603499 1603514 1603472 1603476 1603480 1603481 1603501 1603506 1603471 1603490 1603466 1603494 1603484 1603479 1603425 1603482 1603478 1603459 1603362 1603475 1603455 1603467 1603461 1603409 1603457 1603462 1603463 1603449 1603443 1603454 1603390 1603453 1603452 1603429 1603432 1603451 1603447 1603413 1603438 1603444 1603433 1603437 1603411 1603418 1603428 1603431 1603427 1603423 1603378 1603317 1603404 1603393 1603415 1603359 1603398 1603356 1603407 1603406 1603388 1603399 1603377 1603385 1603368 1603383 1603372 1603367 1603373 1603364 1603339 1603348 1603338 1603358 1603363 1603349 1603361 1603344 1603357 1603327 1603334 1603321 1603345 1603333 1603342 1603335 1603328 1603295 1603297 1603332 1603300 1603329 1603286 ... 1603343 1603336 1603347 1603340 1603346 1603315 1603352 1603341 1603351 1603330 1603325 1603353 1603331 1603360 1603371 1603369 1603354 1603370 1603319 1603350 1603380 1603379 1603374 1603384 1603366 1603365 1603355 1603381 1603386 1603318 1603387 1603375 1603391 1603392 1603397 1603395 1603394 1603389 1603400 1603402 1603396 1603410 1603414 1603376 1603419 1603382 1603412 1603408 1603421 1603401 1603422 1603434 1603430 1603426 1603436 1603439 1603405 1603403 1603445 1603441 1603440 1603442 1603446 1603417 1603458 1603456 1603416 1603450 1603420 1603469 1603473 1603474 1603477 1603435 1603483 1603460 1603487 1603424 1603465 1603464 1603497 1603498 1603496 1603502 1603503 1603492 1603489 1603508 1603486 1603493 1603488 1603491 1603513 1603505 1603517 1603470 1603504 1603468 1603500 1603515

size is 1603519
*** Error in `./testdir-cda/cda-0-21': double free or corruption (out): 0x09c3a930 ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x67377)[0xb7667377]
/lib/i386-linux-gnu/libc.so.6(+0x6d2f7)[0xb766d2f7]
/lib/i386-linux-gnu/libc.so.6(+0x6dc31)[0xb766dc31]
./testdir-cda/cda-0-21[0x8048aef]
./testdir-cda/cda-0-21[0x8048956]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf7)[0xb7618637]
./testdir-cda/cda-0-21[0x8048561]
======= Memory map: ========
08048000-0804b000 r-xp 00000000 fc:00 675055     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-21
0804b000-0804c000 r--p 00002000 fc:00 675055     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-21
0804c000-0804d000 rw-p 00003000 fc:00 675055     /home/lusth/assign0/wfairbanks@crimson.ua.edu/testdir-cda/cda-0-21
09c34000-09c63000 rw-p 00000000 00:00 0          [heap]
b7400000-b7421000 rw-p 00000000 00:00 0 
b7421000-b7500000 ---p 00000000 00:00 0 
b75d7000-b75f3000 r-xp 00000000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b75f3000-b75f4000 rw-p 0001b000 fc:00 1835078    /lib/i386-linux-gnu/libgcc_s.so.1
b75ff000-b7600000 rw-p 00000000 00:00 0 
b7600000-b77b0000 r-xp 00000000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b77b0000-b77b2000 r--p 001af000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b77b2000-b77b3000 rw-p 001b1000 fc:00 1838979    /lib/i386-linux-gnu/libc-2.23.so
b77b3000-b77b6000 rw-p 00000000 00:00 0 
b77c0000-b77c2000 rw-p 00000000 00:00 0 
b77c2000-b77c5000 r--p 00000000 00:00 0          [vvar]
b77c5000-b77c6000 r-xp 00000000 00:00 0          [vdso]
b77c6000-b77e9000 r-xp 00000000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b77e9000-b77ea000 r--p 00022000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
b77ea000-b77eb000 rw-p 00023000 fc:00 1838977    /lib/i386-linux-gnu/ld-2.23.so
bfdf6000-bfe17000 rw-p 00000000 00:00 0          [stack]
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! TRYING YOUR STACK MODULE WITH ALTERNATE CODE

!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #72
     test program is stack-0-0.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, simple
items: ||
items: |1,4,2,3|
items: [3,2,4,1,3,2,4,1]
items: [3,2,4,1,3,2,4,1,3,2,4,1,[4]]
items: |4,2,3,1,4,2,3,1,4,2,3|
items: |2,3,1,4,2,3,1,4,2,3|
items: |3,1,4,2,3,1,4,2,3|
items: |1,4,2,3,1,4,2,3|
size: 8
--------------------------------------------------------------

Your output matches exactly!



TEST #73 (valgrind)
     test program is stack-0-0.c


==29319== All heap blocks were freed -- no leaks are possible
==29319== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #74
     test program is stack-0-1.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
REAL test of STACK, simple
items: ||
items: |1.100000,4.400000,2.200000,3.300000|
items: [3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000]
items: [3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000,[4]]
items: |4.400000,2.200000,3.300000,1.100000,4.400000,2.200000,3.300000,1.100000,4.400000,2.200000,3.300000|
items: |2.200000,3.300000,1.100000,4.400000,2.200000,3.300000,1.100000,4.400000,2.200000,3.300000|
items: |3.300000,1.100000,4.400000,2.200000,3.300000,1.100000,4.400000,2.200000,3.300000|
items: |1.100000,4.400000,2.200000,3.300000,1.100000,4.400000,2.200000,3.300000|
size: 8
--------------------------------------------------------------

Your output matches exactly!



TEST #75 (valgrind)
     test program is stack-0-1.c


==29370== All heap blocks were freed -- no leaks are possible
==29370== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #76
     test program is stack-0-2.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
STRING test of STACK, simple
items: ||
items: |a1,a4,a2,a3|
items: [a3,a2,a4,a1,a3,a2,a4,a1]
items: [a3,a2,a4,a1,a3,a2,a4,a1,a3,a2,a4,a1,[4]]
items: |a4,a2,a3,a1,a4,a2,a3,a1,a4,a2,a3|
items: |a2,a3,a1,a4,a2,a3,a1,a4,a2,a3|
items: |a3,a1,a4,a2,a3,a1,a4,a2,a3|
items: |a1,a4,a2,a3,a1,a4,a2,a3|
size: 8
--------------------------------------------------------------

Your output matches exactly!



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #77
     test program is stack-0-3.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions at the front
items: []
items: [63,6,23,40,91,31,33,15,112,107,60,110,4,0,0,5,11,83,59,37,8,26,118,111,90,46,122,121,8,20,21,78,27,51,118,125,83,20,10,64,3,77,43,7,78,50,20,96,2,79,2,10,105,127,129,71,43,127,61,51,17,90,5,51,10,124,45,100,20,62,33,24,9,84,38,94,10,58,59,13,13,68,30,125,65,35,66,115,32,3,42,56,100,47,114,118,47,28,87,68,91,128,99,107,88,6,70,98,72,5,118,85,73,25,87,14,67,22,129,99,32,40,31,2,95,14,120,11,43,83,86]
size is 131
items: (displaying top element)
23

size is 262
--------------------------------------------------------------

Your output matches exactly!



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #78
     test program is stack-0-4.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
items: ||
size is 0
items: []
size is 0
items: (displaying top element)
1243

size is 1198
--------------------------------------------------------------
stack-0-4: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 29499 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
stack-0-4: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #79
     test program is stack-0-5.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
items: ||
size is 0
items: []
size is 0
items: (displaying top element)
15853

size is 11278
--------------------------------------------------------------
stack-0-5: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 29551 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
stack-0-5: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #80
     test program is stack-0-6.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
items: ||
size is 0
items: []
size is 0
items: (displaying top element)
112345

size is 86800
--------------------------------------------------------------
stack-0-6: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 29603 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
stack-0-6: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #81
     test program is stack-0-7.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
items: ||
size is 0
items: []
size is 0
items: (displaying top element)
56526

size is 755085
--------------------------------------------------------------
stack-0-7: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 29655 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
stack-0-7: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #82
     test program is stack-0-8.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
items: ||
size is 0
items: []
size is 0
items: (displaying top element)
1130461

size is 1868312
--------------------------------------------------------------
stack-0-8: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 29708 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
stack-0-8: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #83
     test program is stack-0-9.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
items: ||
size is 0
items: []
size is 0
items: (displaying top element)
1474125

size is 2004110
--------------------------------------------------------------
stack-0-9: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 29760 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
stack-0-9: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c da.c
gcc -Wall -Wextra -g -c stack.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o da.o stack.o

TEST #84
     test program is stack-0-10.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
items: ||
size is 0
items: []
size is 0
items: (displaying top element)
781572

size is 829973
--------------------------------------------------------------
stack-0-10: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 29812 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of STACK, insertions and deletions at front
items: ||
stack-0-10: stack.c:64: pop: Assertion `sizeDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point




!! TRYING YOUR QUEUE MODULE WITH ALTERNATE CODE

!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #85
     test program is queue-0-0.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, simple
items: <>
items: <3,2,4,1>
items: (3,2,4,1,3,2,4,1)
items: (3,2,4,1,3,2,4,1,3,2,4,1,(4))
items: <2,4,1,3,2,4,1,3,2,4,1>
items: <4,1,3,2,4,1,3,2,4,1>
items: <1,3,2,4,1,3,2,4,1>
items: <3,2,4,1,3,2,4,1>
size: 8
--------------------------------------------------------------

Your output matches exactly!



TEST #86 (valgrind)
     test program is queue-0-0.c


==29873== All heap blocks were freed -- no leaks are possible
==29873== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #87
     test program is queue-0-1.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
REAL test of QUEUE, simple
items: <>
items: <3.300000,2.200000,4.400000,1.100000>
items: (3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000)
items: (3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000,(4))
items: <2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000>
items: <4.400000,1.100000,3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000>
items: <1.100000,3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000>
items: <3.300000,2.200000,4.400000,1.100000,3.300000,2.200000,4.400000,1.100000>
size: 8
--------------------------------------------------------------

Your output matches exactly!



TEST #88 (valgrind)
     test program is queue-0-1.c


==29924== All heap blocks were freed -- no leaks are possible
==29924== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You seemed to have no memory problems


!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #89
     test program is queue-0-2.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
STRING test of QUEUE, simple
items: <>
items: <a3,a2,a4,a1>
items: (a3,a2,a4,a1,a3,a2,a4,a1)
items: (a3,a2,a4,a1,a3,a2,a4,a1,a3,a2,a4,a1,(4))
items: <a2,a4,a1,a3,a2,a4,a1,a3,a2,a4,a1>
items: <a4,a1,a3,a2,a4,a1,a3,a2,a4,a1>
items: <a1,a3,a2,a4,a1,a3,a2,a4,a1>
items: <a3,a2,a4,a1,a3,a2,a4,a1>
size: 8
--------------------------------------------------------------

Your output matches exactly!



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #90
     test program is queue-0-3.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions at the front
items: ()
items: (63,6,23,40,91,31,33,15,112,107,60,110,4,0,0,5,11,83,59,37,8,26,118,111,90,46,122,121,8,20,21,78,27,51,118,125,83,20,10,64,3,77,43,7,78,50,20,96,2,79,2,10,105,127,129,71,43,127,61,51,17,90,5,51,10,124,45,100,20,62,33,24,9,84,38,94,10,58,59,13,13,68,30,125,65,35,66,115,32,3,42,56,100,47,114,118,47,28,87,68,91,128,99,107,88,6,70,98,72,5,118,85,73,25,87,14,67,22,129,99,32,40,31,2,95,14,120,11,43,83,86)
size is 131
items: (displaying top element)
63

size is 262
--------------------------------------------------------------

Your output matches exactly!



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #91
     test program is queue-0-4.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
items: <>
size is 0
items: ()
size is 0
items: (displaying top element)
768

size is 1198
--------------------------------------------------------------
queue-0-4: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 30053 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
queue-0-4: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #92
     test program is queue-0-5.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
items: <>
size is 0
items: ()
size is 0
items: (displaying top element)
14984

size is 11278
--------------------------------------------------------------
queue-0-5: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 30105 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
queue-0-5: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #93
     test program is queue-0-6.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
items: <>
size is 0
items: ()
size is 0
items: (displaying top element)
9632

size is 86800
--------------------------------------------------------------
queue-0-6: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 30157 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
queue-0-6: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #94
     test program is queue-0-7.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
items: <>
size is 0
items: ()
size is 0
items: (displaying top element)
81714

size is 755085
--------------------------------------------------------------
queue-0-7: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 30209 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
queue-0-7: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #95
     test program is queue-0-8.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
items: <>
size is 0
items: ()
size is 0
items: (displaying top element)
315083

size is 1868312
--------------------------------------------------------------
queue-0-8: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 30261 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
queue-0-8: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #96
     test program is queue-0-9.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
items: <>
size is 0
items: ()
size is 0
items: (displaying top element)
1977165

size is 2004110
--------------------------------------------------------------
queue-0-9: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 30313 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
queue-0-9: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point



!! compiling the test program with your code
gcc -Wall -Wextra -g -c integer.c
gcc -Wall -Wextra -g -c real.c
gcc -Wall -Wextra -g -c string.c
gcc -Wall -Wextra -g -c cda.c
gcc -Wall -Wextra -g -c queue.c
gcc -Wall -Wextra -g -o tester tester.c integer.o real.o string.o cda.o queue.o

TEST #97
     test program is queue-0-10.c (alloted time: 2s)

EXPECTED RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
items: <>
size is 0
items: ()
size is 0
items: (displaying top element)
702962

size is 829973
--------------------------------------------------------------
queue-0-10: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
./module-tester: line 35: 30365 Aborted                 timeout $alloted ./$testdir/$tester $args > yours

YOUR PARTIAL RESULTS:
--------------------------------------------------------------
INTEGER test of QUEUE, insertions and deletions at front
items: <>
queue-0-10: queue.c:64: dequeue: Assertion `sizeCDA(items->data) != 0' failed.
timeout: the monitored command dumped core
--------------------------------------------------------------
the test FAILED at this point




!! TESTING YOUR MAKEFILE

Testing if make clean works

TEST #98
     timeout 3s ./test-clean

make clean
all generated files seem to have been cleaned

the test was successful

Testing if make works

TEST #99
     timeout 3s ./test-make

make clean; make
gcc -Wall -Wextra -std=c99 -c da.c
gcc -Wall -Wextra -std=c99 -c da-0-0.c
gcc -Wall -Wextra -std=c99 -c integer.c
gcc -Wall -Wextra -std=c99 da.o da-0-0.o integer.o -o da-0-0
gcc -Wall -Wextra -std=c99 -c cda.c
gcc -Wall -Wextra -std=c99 -c cda-0-0.c
gcc -Wall -Wextra -std=c99 cda.o cda-0-0.o integer.o -o cda-0-0
gcc -Wall -Wextra -std=c99 -c stack.c
gcc -Wall -Wextra -std=c99 -c stack-0-0.c
gcc -Wall -Wextra -std=c99 stack.o da.o stack-0-0.o integer.o -o stack-0-0
gcc -Wall -Wextra -std=c99 -c queue.c
gcc -Wall -Wextra -std=c99 -c queue-0-0.c
gcc -Wall -Wextra -std=c99 queue.o cda.o queue-0-0.o integer.o -o queue-0-0
all modules appear to have been successfully rebuilt

the test was successful

Testing for unnecessary compilation

TEST #100
     timeout 3s ./test-dmake

make; make
make: Nothing to be done for 'all'.
no modules have been rebuilt

the test was successful

Testing for a valgrind rule

TEST #101
     timeout 5s ./test-valgrind

make valgrind
valgrind ./da-0-0

the valgrind rule was present


the test was successful



number of tests: 102
number of tests passed: 71
